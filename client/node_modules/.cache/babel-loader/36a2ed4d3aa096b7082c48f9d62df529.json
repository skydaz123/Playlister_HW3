{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { createContext, useState } from 'react';\nimport jsTPS from '../common/jsTPS';\nimport api from '../api';\nexport const GlobalStoreContext = /*#__PURE__*/createContext({}); //import MoveSong_Transaction from '../transactions/MoveSong_transaction';\n//import AddSong_Transaction from '../transactions/AddSong_Transaction';\n//import EditSong_Transaction from '../transactions/EditSong_Transaction';\n//import DeleteSong_Transaction from '../transactions/DeleteSong_Transaction';\n\n/*\r\n    This is our global data store. Note that it uses the Flux design pattern,\r\n    which makes use of things like actions and reducers. \r\n    \r\n    @author McKilla Gorilla\r\n*/\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\n\nexport const GlobalStoreActionType = {\n  CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n  CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n  CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n  LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n  SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n  SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n  SHOW_DELETE_LIST_MODAL: \"SHOW_DELETE_LIST_MODAL\",\n  HIDE_DELETE_LIST_MODAL: \"HIDE_DELETE_LIST_MODAL\",\n  SET_LIST_ACTTIVE: \"SET_LIST_ACTTIVE\"\n}; // WE'LL NEED THIS TO PROCESS TRANSACTIONS\n\nconst tps = new jsTPS(); // WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\n\nexport const useGlobalStore = () => {\n  _s();\n\n  // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n  const [store, setStore] = useState({\n    idNamePairs: [],\n    currentList: null,\n    newListCounter: 0,\n    listNameActive: false,\n    deleteListId: null\n  }); // HERE'S THE DATA STORE'S REDUCER, IT MUST\n  // HANDLE EVERY TYPE OF STATE CHANGE\n\n  const storeReducer = action => {\n    const {\n      type,\n      payload\n    } = action;\n\n    switch (type) {\n      // LIST UPDATE OF ITS NAME\n      case GlobalStoreActionType.CHANGE_LIST_NAME:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: payload.playlist,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            deleteListId: null\n          });\n        }\n      // STOP EDITING THE CURRENT LIST\n\n      case GlobalStoreActionType.CLOSE_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            deleteListId: null\n          });\n        }\n      // CREATE A NEW LIST\n\n      case GlobalStoreActionType.CREATE_NEW_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter + 1,\n            listNameActive: false,\n            deleteListId: null\n          });\n        }\n\n      case GlobalStoreActionType.SET_LIST_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            listNameActive: payload,\n            deleteListId: store.deleteListId\n          });\n        }\n      // GET ALL THE LISTS SO WE CAN PRESENT THEM\n\n      case GlobalStoreActionType.LOAD_ID_NAME_PAIRS:\n        {\n          return setStore({\n            idNamePairs: payload,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            deleteListId: null\n          });\n        }\n      // PREPARE TO DELETE A LIST\n\n      case GlobalStoreActionType.MARK_LIST_FOR_DELETION:\n        {\n          console.log(\"payload is:\" + payload);\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            deleteListId: payload\n          });\n        }\n      // UPDATE A LIST\n\n      case GlobalStoreActionType.SET_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            deleteListId: null\n          });\n        }\n\n      case GlobalStoreActionType.DELETE_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter - 1,\n            listNameActive: false,\n            deleteListId: null\n          });\n        }\n      // START EDITING A LIST NAME\n\n      case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: true,\n            deleteListId: null\n          });\n        }\n\n      case GlobalStoreActionType.SHOW_DELETE_LIST_MODAL:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            listNameActive: store.currentList,\n            deleteListId: store.deleteListId\n          });\n        }\n\n      case GlobalStoreActionType.HIDE_DELETE_LIST_MODAL:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: store.currentList,\n            deleteListId: null\n          });\n        }\n\n      default:\n        return store;\n    }\n  }; // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n  // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n  // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n\n  store.setIsListNameEditActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_LIST_ACTTIVE,\n      payload: true\n    });\n  }; // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n\n\n  store.changeListName = function (id, newName) {\n    // GET THE LIST\n    async function asyncChangeListName(id) {\n      let response = await api.getPlaylistById(id);\n\n      if (response.data.success) {\n        let playlist = response.data.playist;\n        playlist.name = newName;\n\n        async function updateList(playlist) {\n          // IMPLEMENT THIS \n          response = await api.updatePlaylistById(playlist._id, playlist);\n\n          if (response.data.success) {\n            async function getListPairs(playlist) {\n              response = await api.getPlaylistPairs();\n\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                  payload: {\n                    idNamePairs: pairsArray,\n                    playlist: playlist\n                  }\n                });\n              }\n            }\n\n            getListPairs(playlist);\n          }\n        }\n\n        updateList(playlist);\n      }\n    }\n\n    asyncChangeListName(id);\n  }; // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n\n\n  store.closeCurrentList = function () {\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n      payload: {}\n    });\n  };\n\n  store.createNewList = function () {\n    async function asyncCreatePlayList() {\n      console.log(\"poop\");\n      const body = {\n        name: \"Untitled\"\n      };\n      const response = await api.createPlaylist(body);\n\n      if (response.data.success) {\n        let result = await api.getPlaylistPairs();\n        let pairsArray = result.data.idNamePairs;\n        storeReducer({\n          type: GlobalStoreActionType.CREATE_NEW_LIST,\n          payload: pairsArray\n        });\n        store.setCurrentList(pairsArray[pairsArray.length - 1]._id);\n      } else {\n        console.log(\"API FAILED TO GET THE LIST PAIRS\");\n      }\n    }\n\n    asyncCreatePlayList();\n  };\n  /*store.markListForDeletion = function (id) {\r\n      async function mark(test_id) {\r\n          let response = await api.getPlaylistById(test_id);\r\n          storeReducer({\r\n              type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\r\n              payload: {\r\n                  id: test_id,\r\n                  playlist: response.data.playlist\r\n              }\r\n          })\r\n          console.log(\"marking function runs\");\r\n      }\r\n      mark(id);\r\n      store.showDeleteListModal();\r\n  }*/\n\n\n  store.deleteList = function (id) {\n    console.log(\"delete id is : \" + id);\n\n    async function asyncDeleteList(test_id) {\n      const response = await api.deletePlaylist(test_id);\n\n      if (response.data.success) {\n        let result = await api.getPlaylistPairs();\n        let pairsArray = result.data.idNamePairs;\n        storeReducer({\n          type: GlobalStoreActionType.CREATE_NEW_LIST,\n          payload: pairsArray\n        });\n        store.hideDeleteListModal(test_id);\n      } else {\n        console.log(\"API FAILED TO GET THE LIST PAIRS\");\n      }\n    }\n\n    asyncDeleteList(id);\n  };\n  /*store.addAddSongTransaction = function () {\r\n      let transaction = new AddSong_Transaction(store);\r\n      tps.addAddSongTransaction(transaction);\r\n  }\r\n    store.addMoveSongTransaction = (start, end) => {\r\n      let transaction = new MoveSong_Transaction(store, start, end);\r\n      tps.addTransaction(transaction);\r\n  }\r\n    store.addDeleteSongTransaction = (index, originalSong) => {\r\n      let transaction = new DeleteSong_Transaction(store, index, originalSong);\r\n      tps.addTransaction(transaction);\r\n  }\r\n    store.addEditSongTransaction = (index, title, artist, youTubeId, originalSong) => {\r\n      let transaction = new EditSong_Transaction(store, index, originalSong, title, artist, youTubeId);\r\n      tps.addTransaction(transaction);\r\n  }*/\n\n\n  store.addSong = function () {\n    async function asyncAddSong() {\n      let list = store.currentList;\n      let song = {\n        \"title\": \"Untitled\",\n        \"artist\": \"Unknown\",\n        \"youTubeId\": \"dQw4w9WgXcQ\"\n      };\n      list.songs.push(song);\n      await api.putPlaylist(list._id, list);\n      store.setCurrentList(list._id);\n    }\n\n    asyncAddSong();\n  };\n  /*store.popSong = function() {\r\n      async function asyncPopSong() {\r\n          let list = store.currentList;\r\n          list.songs.pop();\r\n          let response = await api.putPlaylist(list._id, list);\r\n          if (response.data.success) {\r\n              store.setCurrentList(list._id);\r\n          }\r\n          else {\r\n              console.log(\"API FAILED TO GET THE LIST PAIRS\");\r\n          }\r\n      }\r\n      asyncPopSong();\r\n  } */\n\n  /*store.deleteSong = function (index) {\r\n      async function asyncDeleteSong(test_index){\r\n          let list = store.currentList\r\n          let song = list.songs[test_index];\r\n          let oldSong = {\r\n              \"title\": song.title,\r\n              \"artist\": song.artist,\r\n              \"youTubeId\": song.youTubeId\r\n          }\r\n          let newList = list.songs.splice(index,1);\r\n          let response = await api.putPlaylist(list._id, newList);\r\n          if (response.data.success) {\r\n              store.setCurrentList(list._id);\r\n          }\r\n          else {\r\n              console.log(\"API FAILED TO GET THE LIST PAIRS\");\r\n          }\r\n      }\r\n      asyncDeleteSong(index);\r\n  } */\n\n  /*store.insertSong = function (index, song) {\r\n      async function asyncInsertSong(test_index, test_song) {\r\n          let list = store.currentList;\r\n          list.songs.splice(test_index, 0, test_song);\r\n          let response = await api.putPlaylist(list._id, list);\r\n          if (response.data.success) {\r\n              store.setCurrentList(list._id);\r\n          }\r\n          else {\r\n              console.log(\"API FAILED TO GET THE LIST PAIRS\");\r\n          }\r\n      }\r\n      asyncInsertSong(index, song);\r\n  }*/\n\n  /*store.moveSong(start, end) {\r\n          let list = store.currentList;\r\n          start -= 1;\r\n          end -= 1;\r\n          if (start < end) {\r\n              let temp = list.songs[start];\r\n              for (let i = start; i < end; i++) {\r\n                  list.songs[i] = list.songs[i + 1];\r\n              }\r\n              list.songs[end] = temp;\r\n          }\r\n          else if (start > end) {\r\n              let temp = list.songs[start];\r\n              for (let i = start; i > end; i--) {\r\n                  list.songs[i] = list.songs[i - 1];\r\n              }\r\n              list.songs[end] = temp;\r\n          }\r\n          store.setCurrentList(list.id, list.songs);\r\n  }*/\n  // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n\n\n  store.loadIdNamePairs = function () {\n    async function asyncLoadIdNamePairs() {\n      const response = await api.getPlaylistPairs();\n\n      if (response.data.success) {\n        let pairsArray = response.data.idNamePairs;\n        storeReducer({\n          type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n          payload: pairsArray\n        });\n      } else {\n        console.log(\"API FAILED TO GET THE LIST PAIRS\");\n      }\n    }\n\n    asyncLoadIdNamePairs();\n  };\n\n  store.setCurrentList = function (id) {\n    async function asyncSetCurrentList(id) {\n      let response = await api.getPlaylistById(id);\n\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.SET_CURRENT_LIST,\n            payload: playlist\n          });\n          store.history.push(\"/playlist/\" + playlist._id);\n        }\n      }\n    }\n\n    asyncSetCurrentList(id);\n  };\n\n  store.getPlaylistSize = function () {\n    return store.currentList.songs.length;\n  };\n\n  store.undo = function () {\n    tps.undoTransaction();\n  };\n\n  store.redo = function () {\n    tps.doTransaction();\n  }; // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n\n\n  store.setlistNameActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n      payload: null\n    });\n  };\n\n  store.showDeleteListModal = function (id) {\n    let modal = document.getElementById(\"delete-list-modal\");\n    modal.classList.add(\"is-visible\");\n    console.log(\"showing modal\");\n    console.log(\"ID is: \" + id);\n    storeReducer({\n      type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n      payload: id\n    });\n    console.log(store.deleteListId);\n  };\n\n  store.hideDeleteListModal = function () {\n    console.log(\"hiding modal\");\n    let modal = document.getElementById(\"delete-list-modal\");\n\n    if (modal !== null) {\n      modal.classList.remove(\"is-visible\");\n      storeReducer({\n        type: GlobalStoreActionType.HIDE_DELETE_LIST_MODAL,\n        payload: null\n      });\n    }\n  }; // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n\n\n  return {\n    store,\n    storeReducer\n  };\n};\n\n_s(useGlobalStore, \"DR94sOwUAaA3i9jjdEuqGDWLww8=\");","map":{"version":3,"names":["createContext","useState","jsTPS","api","GlobalStoreContext","GlobalStoreActionType","CHANGE_LIST_NAME","CLOSE_CURRENT_LIST","CREATE_NEW_LIST","LOAD_ID_NAME_PAIRS","SET_CURRENT_LIST","SET_LIST_NAME_EDIT_ACTIVE","SHOW_DELETE_LIST_MODAL","HIDE_DELETE_LIST_MODAL","SET_LIST_ACTTIVE","tps","useGlobalStore","store","setStore","idNamePairs","currentList","newListCounter","listNameActive","deleteListId","storeReducer","action","type","payload","playlist","SET_LIST_ACTIVE","MARK_LIST_FOR_DELETION","console","log","DELETE_LIST","setIsListNameEditActive","changeListName","id","newName","asyncChangeListName","response","getPlaylistById","data","success","playist","name","updateList","updatePlaylistById","_id","getListPairs","getPlaylistPairs","pairsArray","closeCurrentList","createNewList","asyncCreatePlayList","body","createPlaylist","result","setCurrentList","length","deleteList","asyncDeleteList","test_id","deletePlaylist","hideDeleteListModal","addSong","asyncAddSong","list","song","songs","push","putPlaylist","loadIdNamePairs","asyncLoadIdNamePairs","asyncSetCurrentList","history","getPlaylistSize","undo","undoTransaction","redo","doTransaction","setlistNameActive","showDeleteListModal","modal","document","getElementById","classList","add","remove"],"sources":["C:/Users/haodu/OneDrive/Desktop/hw3/d/client/src/store/index.js"],"sourcesContent":["import { createContext, useState } from 'react'\r\nimport jsTPS from '../common/jsTPS'\r\nimport api from '../api'\r\nexport const GlobalStoreContext = createContext({});\r\n\r\n//import MoveSong_Transaction from '../transactions/MoveSong_transaction';\r\n//import AddSong_Transaction from '../transactions/AddSong_Transaction';\r\n//import EditSong_Transaction from '../transactions/EditSong_Transaction';\r\n//import DeleteSong_Transaction from '../transactions/DeleteSong_Transaction';\r\n/*\r\n    This is our global data store. Note that it uses the Flux design pattern,\r\n    which makes use of things like actions and reducers. \r\n    \r\n    @author McKilla Gorilla\r\n*/\r\n\r\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\r\n// DATA STORE STATE THAT CAN BE PROCESSED\r\nexport const GlobalStoreActionType = {\r\n    CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\r\n    CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\r\n    CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\r\n    LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\r\n    SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\r\n    SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\r\n    SHOW_DELETE_LIST_MODAL: \"SHOW_DELETE_LIST_MODAL\",\r\n    HIDE_DELETE_LIST_MODAL: \"HIDE_DELETE_LIST_MODAL\",\r\n    SET_LIST_ACTTIVE: \"SET_LIST_ACTTIVE\"\r\n}\r\n\r\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\r\nconst tps = new jsTPS();\r\n\r\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\r\n// AVAILABLE TO THE REST OF THE APPLICATION\r\nexport const useGlobalStore = () => {\r\n    // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\r\n    const [store, setStore] = useState({\r\n        idNamePairs: [],\r\n        currentList: null,\r\n        newListCounter: 0,\r\n        listNameActive: false,\r\n        deleteListId: null\r\n    });\r\n\r\n    // HERE'S THE DATA STORE'S REDUCER, IT MUST\r\n    // HANDLE EVERY TYPE OF STATE CHANGE\r\n    const storeReducer = (action) => {\r\n        const { type, payload } = action;\r\n        switch (type) {\r\n            // LIST UPDATE OF ITS NAME\r\n            case GlobalStoreActionType.CHANGE_LIST_NAME: {\r\n                return setStore({\r\n                    idNamePairs: payload.idNamePairs,\r\n                    currentList: payload.playlist,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: false,\r\n                    deleteListId: null\r\n                });\r\n            }\r\n            // STOP EDITING THE CURRENT LIST\r\n            case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: null,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: false,\r\n                    deleteListId: null\r\n                })\r\n            }\r\n            // CREATE A NEW LIST\r\n            case GlobalStoreActionType.CREATE_NEW_LIST: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: payload,\r\n                    newListCounter: store.newListCounter + 1,\r\n                    listNameActive: false,\r\n                    deleteListId: null\r\n                })\r\n            }\r\n\r\n            case GlobalStoreActionType.SET_LIST_ACTIVE: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: store.currentList,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: payload,\r\n                    deleteListId: store.deleteListId\r\n                })\r\n            }\r\n            // GET ALL THE LISTS SO WE CAN PRESENT THEM\r\n            case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\r\n                return setStore({\r\n                    idNamePairs: payload,\r\n                    currentList: null,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: false,\r\n                    deleteListId: null\r\n                });\r\n            }\r\n            // PREPARE TO DELETE A LIST\r\n            case GlobalStoreActionType.MARK_LIST_FOR_DELETION: {\r\n                console.log(\"payload is:\" + payload);\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: store.currentList,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: false,\r\n                    deleteListId: payload\r\n                });\r\n            }\r\n\r\n            // UPDATE A LIST\r\n            case GlobalStoreActionType.SET_CURRENT_LIST: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: payload,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: false,\r\n                    deleteListId: null\r\n                });\r\n            }\r\n            case GlobalStoreActionType.DELETE_LIST: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: payload,\r\n                    newListCounter: store.newListCounter - 1,\r\n                    listNameActive: false,\r\n                    deleteListId: null\r\n                });\r\n            }\r\n            // START EDITING A LIST NAME\r\n            case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: payload,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: true,\r\n                    deleteListId: null\r\n                });\r\n            }\r\n\r\n            case GlobalStoreActionType.SHOW_DELETE_LIST_MODAL: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: store.currentList,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: store.currentList,\r\n                    deleteListId: store.deleteListId,\r\n                })\r\n            }\r\n\r\n            case GlobalStoreActionType.HIDE_DELETE_LIST_MODAL: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: null,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: store.currentList,\r\n                    deleteListId: null,\r\n                })\r\n            }\r\n            default:\r\n                return store;\r\n        }\r\n    }\r\n    // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\r\n    // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \r\n    // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\r\n\r\n    store.setIsListNameEditActive = function () {\r\n        storeReducer({\r\n            type: GlobalStoreActionType.SET_LIST_ACTTIVE,\r\n            payload: true\r\n        });\r\n    }\r\n    // THIS FUNCTION PROCESSES CHANGING A LIST NAME\r\n    store.changeListName = function (id, newName) {\r\n        // GET THE LIST\r\n        async function asyncChangeListName(id) {\r\n            let response = await api.getPlaylistById(id);\r\n            if (response.data.success) {\r\n                let playlist = response.data.playist;\r\n                playlist.name = newName;\r\n                async function updateList(playlist) {\r\n                    // IMPLEMENT THIS \r\n                    response = await api.updatePlaylistById(playlist._id, playlist);\r\n                    if (response.data.success) {\r\n                        async function getListPairs(playlist) {\r\n                            response = await api.getPlaylistPairs();\r\n                            if (response.data.success) {\r\n                                let pairsArray = response.data.idNamePairs;\r\n                                storeReducer({\r\n                                    type: GlobalStoreActionType.CHANGE_LIST_NAME,\r\n                                    payload: {\r\n                                        idNamePairs: pairsArray,\r\n                                        playlist: playlist\r\n                                    }\r\n                                });\r\n                            }\r\n                        }\r\n                        getListPairs(playlist);\r\n                    }\r\n                }\r\n                updateList(playlist);\r\n            }\r\n        }\r\n        asyncChangeListName(id);\r\n    }\r\n\r\n    // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\r\n    store.closeCurrentList = function () {\r\n        storeReducer({\r\n            type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\r\n            payload: {}\r\n        });\r\n    }\r\n\r\n    store.createNewList = function () {\r\n        async function asyncCreatePlayList() {\r\n            console.log(\"poop\");\r\n            const body = { name: \"Untitled\" }\r\n            const response = await api.createPlaylist(body);\r\n            if (response.data.success) {\r\n                let result = await api.getPlaylistPairs();\r\n                let pairsArray = result.data.idNamePairs;\r\n                storeReducer({\r\n                    type: GlobalStoreActionType.CREATE_NEW_LIST,\r\n                    payload: pairsArray\r\n                })\r\n                store.setCurrentList(pairsArray[pairsArray.length - 1]._id);\r\n            }\r\n\r\n            else {\r\n                console.log(\"API FAILED TO GET THE LIST PAIRS\");\r\n            }\r\n        }\r\n        asyncCreatePlayList();\r\n    }\r\n\r\n    /*store.markListForDeletion = function (id) {\r\n        async function mark(test_id) {\r\n            let response = await api.getPlaylistById(test_id);\r\n            storeReducer({\r\n                type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\r\n                payload: {\r\n                    id: test_id,\r\n                    playlist: response.data.playlist\r\n                }\r\n            })\r\n            console.log(\"marking function runs\");\r\n        }\r\n        mark(id);\r\n        store.showDeleteListModal();\r\n    }*/\r\n\r\n    store.deleteList = function (id) {\r\n        console.log(\"delete id is : \" + id);\r\n        async function asyncDeleteList(test_id) {\r\n            const response = await api.deletePlaylist(test_id);\r\n            if (response.data.success) {\r\n                let result = await api.getPlaylistPairs();\r\n                let pairsArray = result.data.idNamePairs;\r\n                storeReducer({\r\n                    type: GlobalStoreActionType.CREATE_NEW_LIST,\r\n                    payload: pairsArray\r\n                })\r\n                store.hideDeleteListModal(test_id);\r\n            }\r\n            else {\r\n                console.log(\"API FAILED TO GET THE LIST PAIRS\");\r\n            }\r\n        }\r\n        asyncDeleteList(id)\r\n    }\r\n\r\n    /*store.addAddSongTransaction = function () {\r\n        let transaction = new AddSong_Transaction(store);\r\n        tps.addAddSongTransaction(transaction);\r\n    }\r\n\r\n    store.addMoveSongTransaction = (start, end) => {\r\n        let transaction = new MoveSong_Transaction(store, start, end);\r\n        tps.addTransaction(transaction);\r\n    }\r\n\r\n    store.addDeleteSongTransaction = (index, originalSong) => {\r\n        let transaction = new DeleteSong_Transaction(store, index, originalSong);\r\n        tps.addTransaction(transaction);\r\n    }\r\n\r\n    store.addEditSongTransaction = (index, title, artist, youTubeId, originalSong) => {\r\n        let transaction = new EditSong_Transaction(store, index, originalSong, title, artist, youTubeId);\r\n        tps.addTransaction(transaction);\r\n    }*/\r\n\r\n    store.addSong = function () {\r\n        async function asyncAddSong() {\r\n            let list = store.currentList;\r\n            let song = {\r\n                \"title\": \"Untitled\",\r\n                \"artist\": \"Unknown\",\r\n                \"youTubeId\": \"dQw4w9WgXcQ\"\r\n            }\r\n            list.songs.push(song);\r\n            await api.putPlaylist(list._id, list);\r\n            store.setCurrentList(list._id);\r\n        }\r\n        asyncAddSong();\r\n    }\r\n\r\n\r\n    /*store.popSong = function() {\r\n        async function asyncPopSong() {\r\n            let list = store.currentList;\r\n            list.songs.pop();\r\n            let response = await api.putPlaylist(list._id, list);\r\n            if (response.data.success) {\r\n                store.setCurrentList(list._id);\r\n            }\r\n            else {\r\n                console.log(\"API FAILED TO GET THE LIST PAIRS\");\r\n            }\r\n        }\r\n        asyncPopSong();\r\n    } */\r\n\r\n    /*store.deleteSong = function (index) {\r\n        async function asyncDeleteSong(test_index){\r\n            let list = store.currentList\r\n            let song = list.songs[test_index];\r\n            let oldSong = {\r\n                \"title\": song.title,\r\n                \"artist\": song.artist,\r\n                \"youTubeId\": song.youTubeId\r\n            }\r\n            let newList = list.songs.splice(index,1);\r\n            let response = await api.putPlaylist(list._id, newList);\r\n            if (response.data.success) {\r\n                store.setCurrentList(list._id);\r\n            }\r\n            else {\r\n                console.log(\"API FAILED TO GET THE LIST PAIRS\");\r\n            }\r\n        }\r\n        asyncDeleteSong(index);\r\n    } */\r\n\r\n    /*store.insertSong = function (index, song) {\r\n        async function asyncInsertSong(test_index, test_song) {\r\n            let list = store.currentList;\r\n            list.songs.splice(test_index, 0, test_song);\r\n            let response = await api.putPlaylist(list._id, list);\r\n            if (response.data.success) {\r\n                store.setCurrentList(list._id);\r\n            }\r\n            else {\r\n                console.log(\"API FAILED TO GET THE LIST PAIRS\");\r\n            }\r\n        }\r\n        asyncInsertSong(index, song);\r\n    }*/\r\n\r\n\r\n\r\n    /*store.moveSong(start, end) {\r\n            let list = store.currentList;\r\n            start -= 1;\r\n            end -= 1;\r\n            if (start < end) {\r\n                let temp = list.songs[start];\r\n                for (let i = start; i < end; i++) {\r\n                    list.songs[i] = list.songs[i + 1];\r\n                }\r\n                list.songs[end] = temp;\r\n            }\r\n            else if (start > end) {\r\n                let temp = list.songs[start];\r\n                for (let i = start; i > end; i--) {\r\n                    list.songs[i] = list.songs[i - 1];\r\n                }\r\n                list.songs[end] = temp;\r\n            }\r\n            store.setCurrentList(list.id, list.songs);\r\n    }*/\r\n\r\n\r\n    // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\r\n    store.loadIdNamePairs = function () {\r\n        async function asyncLoadIdNamePairs() {\r\n            const response = await api.getPlaylistPairs();\r\n            if (response.data.success) {\r\n                let pairsArray = response.data.idNamePairs;\r\n                storeReducer({\r\n                    type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\r\n                    payload: pairsArray\r\n                });\r\n            }\r\n            else {\r\n                console.log(\"API FAILED TO GET THE LIST PAIRS\");\r\n            }\r\n        }\r\n        asyncLoadIdNamePairs();\r\n    }\r\n\r\n    store.setCurrentList = function (id) {\r\n        async function asyncSetCurrentList(id) {\r\n            let response = await api.getPlaylistById(id);\r\n            if (response.data.success) {\r\n                let playlist = response.data.playlist;\r\n\r\n                if (response.data.success) {\r\n                    storeReducer({\r\n                        type: GlobalStoreActionType.SET_CURRENT_LIST,\r\n                        payload: playlist\r\n                    });\r\n                    store.history.push(\"/playlist/\" + playlist._id);\r\n                }\r\n            }\r\n        }\r\n        asyncSetCurrentList(id);\r\n    }\r\n    store.getPlaylistSize = function () {\r\n        return store.currentList.songs.length;\r\n    }\r\n    store.undo = function () {\r\n        tps.undoTransaction();\r\n    }\r\n    store.redo = function () {\r\n        tps.doTransaction();\r\n    }\r\n\r\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\r\n    store.setlistNameActive = function () {\r\n        storeReducer({\r\n            type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\r\n            payload: null\r\n        });\r\n    }\r\n\r\n    store.showDeleteListModal = function (id) {\r\n        let modal = document.getElementById(\"delete-list-modal\");\r\n        modal.classList.add(\"is-visible\");\r\n        console.log(\"showing modal\");\r\n        console.log(\"ID is: \" + id);\r\n        storeReducer({\r\n            type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\r\n            payload: id\r\n        })\r\n        console.log(store.deleteListId);\r\n    }\r\n\r\n    store.hideDeleteListModal = function () {\r\n        console.log(\"hiding modal\");\r\n        let modal = document.getElementById(\"delete-list-modal\");\r\n        if (modal !== null) {\r\n            modal.classList.remove(\"is-visible\");\r\n            storeReducer({\r\n                type: GlobalStoreActionType.HIDE_DELETE_LIST_MODAL,\r\n                payload: null\r\n            })\r\n        }\r\n    }\r\n\r\n    // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\r\n    return { store, storeReducer };\r\n}"],"mappings":";;AAAA,SAASA,aAAT,EAAwBC,QAAxB,QAAwC,OAAxC;AACA,OAAOC,KAAP,MAAkB,iBAAlB;AACA,OAAOC,GAAP,MAAgB,QAAhB;AACA,OAAO,MAAMC,kBAAkB,gBAAGJ,aAAa,CAAC,EAAD,CAAxC,C,CAEP;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AACA,OAAO,MAAMK,qBAAqB,GAAG;EACjCC,gBAAgB,EAAE,kBADe;EAEjCC,kBAAkB,EAAE,oBAFa;EAGjCC,eAAe,EAAE,iBAHgB;EAIjCC,kBAAkB,EAAE,oBAJa;EAKjCC,gBAAgB,EAAE,kBALe;EAMjCC,yBAAyB,EAAE,2BANM;EAOjCC,sBAAsB,EAAE,wBAPS;EAQjCC,sBAAsB,EAAE,wBARS;EASjCC,gBAAgB,EAAE;AATe,CAA9B,C,CAYP;;AACA,MAAMC,GAAG,GAAG,IAAIb,KAAJ,EAAZ,C,CAEA;AACA;;AACA,OAAO,MAAMc,cAAc,GAAG,MAAM;EAAA;;EAChC;EACA,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBjB,QAAQ,CAAC;IAC/BkB,WAAW,EAAE,EADkB;IAE/BC,WAAW,EAAE,IAFkB;IAG/BC,cAAc,EAAE,CAHe;IAI/BC,cAAc,EAAE,KAJe;IAK/BC,YAAY,EAAE;EALiB,CAAD,CAAlC,CAFgC,CAUhC;EACA;;EACA,MAAMC,YAAY,GAAIC,MAAD,IAAY;IAC7B,MAAM;MAAEC,IAAF;MAAQC;IAAR,IAAoBF,MAA1B;;IACA,QAAQC,IAAR;MACI;MACA,KAAKrB,qBAAqB,CAACC,gBAA3B;QAA6C;UACzC,OAAOY,QAAQ,CAAC;YACZC,WAAW,EAAEQ,OAAO,CAACR,WADT;YAEZC,WAAW,EAAEO,OAAO,CAACC,QAFT;YAGZP,cAAc,EAAEJ,KAAK,CAACI,cAHV;YAIZC,cAAc,EAAE,KAJJ;YAKZC,YAAY,EAAE;UALF,CAAD,CAAf;QAOH;MACD;;MACA,KAAKlB,qBAAqB,CAACE,kBAA3B;QAA+C;UAC3C,OAAOW,QAAQ,CAAC;YACZC,WAAW,EAAEF,KAAK,CAACE,WADP;YAEZC,WAAW,EAAE,IAFD;YAGZC,cAAc,EAAEJ,KAAK,CAACI,cAHV;YAIZC,cAAc,EAAE,KAJJ;YAKZC,YAAY,EAAE;UALF,CAAD,CAAf;QAOH;MACD;;MACA,KAAKlB,qBAAqB,CAACG,eAA3B;QAA4C;UACxC,OAAOU,QAAQ,CAAC;YACZC,WAAW,EAAEF,KAAK,CAACE,WADP;YAEZC,WAAW,EAAEO,OAFD;YAGZN,cAAc,EAAEJ,KAAK,CAACI,cAAN,GAAuB,CAH3B;YAIZC,cAAc,EAAE,KAJJ;YAKZC,YAAY,EAAE;UALF,CAAD,CAAf;QAOH;;MAED,KAAKlB,qBAAqB,CAACwB,eAA3B;QAA4C;UACxC,OAAOX,QAAQ,CAAC;YACZC,WAAW,EAAEF,KAAK,CAACE,WADP;YAEZC,WAAW,EAAEH,KAAK,CAACG,WAFP;YAGZC,cAAc,EAAEJ,KAAK,CAACI,cAHV;YAIZC,cAAc,EAAEK,OAJJ;YAKZJ,YAAY,EAAEN,KAAK,CAACM;UALR,CAAD,CAAf;QAOH;MACD;;MACA,KAAKlB,qBAAqB,CAACI,kBAA3B;QAA+C;UAC3C,OAAOS,QAAQ,CAAC;YACZC,WAAW,EAAEQ,OADD;YAEZP,WAAW,EAAE,IAFD;YAGZC,cAAc,EAAEJ,KAAK,CAACI,cAHV;YAIZC,cAAc,EAAE,KAJJ;YAKZC,YAAY,EAAE;UALF,CAAD,CAAf;QAOH;MACD;;MACA,KAAKlB,qBAAqB,CAACyB,sBAA3B;QAAmD;UAC/CC,OAAO,CAACC,GAAR,CAAY,gBAAgBL,OAA5B;UACA,OAAOT,QAAQ,CAAC;YACZC,WAAW,EAAEF,KAAK,CAACE,WADP;YAEZC,WAAW,EAAEH,KAAK,CAACG,WAFP;YAGZC,cAAc,EAAEJ,KAAK,CAACI,cAHV;YAIZC,cAAc,EAAE,KAJJ;YAKZC,YAAY,EAAEI;UALF,CAAD,CAAf;QAOH;MAED;;MACA,KAAKtB,qBAAqB,CAACK,gBAA3B;QAA6C;UACzC,OAAOQ,QAAQ,CAAC;YACZC,WAAW,EAAEF,KAAK,CAACE,WADP;YAEZC,WAAW,EAAEO,OAFD;YAGZN,cAAc,EAAEJ,KAAK,CAACI,cAHV;YAIZC,cAAc,EAAE,KAJJ;YAKZC,YAAY,EAAE;UALF,CAAD,CAAf;QAOH;;MACD,KAAKlB,qBAAqB,CAAC4B,WAA3B;QAAwC;UACpC,OAAOf,QAAQ,CAAC;YACZC,WAAW,EAAEF,KAAK,CAACE,WADP;YAEZC,WAAW,EAAEO,OAFD;YAGZN,cAAc,EAAEJ,KAAK,CAACI,cAAN,GAAuB,CAH3B;YAIZC,cAAc,EAAE,KAJJ;YAKZC,YAAY,EAAE;UALF,CAAD,CAAf;QAOH;MACD;;MACA,KAAKlB,qBAAqB,CAACM,yBAA3B;QAAsD;UAClD,OAAOO,QAAQ,CAAC;YACZC,WAAW,EAAEF,KAAK,CAACE,WADP;YAEZC,WAAW,EAAEO,OAFD;YAGZN,cAAc,EAAEJ,KAAK,CAACI,cAHV;YAIZC,cAAc,EAAE,IAJJ;YAKZC,YAAY,EAAE;UALF,CAAD,CAAf;QAOH;;MAED,KAAKlB,qBAAqB,CAACO,sBAA3B;QAAmD;UAC/C,OAAOM,QAAQ,CAAC;YACZC,WAAW,EAAEF,KAAK,CAACE,WADP;YAEZC,WAAW,EAAEH,KAAK,CAACG,WAFP;YAGZC,cAAc,EAAEJ,KAAK,CAACI,cAHV;YAIZC,cAAc,EAAEL,KAAK,CAACG,WAJV;YAKZG,YAAY,EAAEN,KAAK,CAACM;UALR,CAAD,CAAf;QAOH;;MAED,KAAKlB,qBAAqB,CAACQ,sBAA3B;QAAmD;UAC/C,OAAOK,QAAQ,CAAC;YACZC,WAAW,EAAEF,KAAK,CAACE,WADP;YAEZC,WAAW,EAAE,IAFD;YAGZC,cAAc,EAAEJ,KAAK,CAACI,cAHV;YAIZC,cAAc,EAAEL,KAAK,CAACG,WAJV;YAKZG,YAAY,EAAE;UALF,CAAD,CAAf;QAOH;;MACD;QACI,OAAON,KAAP;IAjHR;EAmHH,CArHD,CAZgC,CAkIhC;EACA;EACA;;;EAEAA,KAAK,CAACiB,uBAAN,GAAgC,YAAY;IACxCV,YAAY,CAAC;MACTE,IAAI,EAAErB,qBAAqB,CAACS,gBADnB;MAETa,OAAO,EAAE;IAFA,CAAD,CAAZ;EAIH,CALD,CAtIgC,CA4IhC;;;EACAV,KAAK,CAACkB,cAAN,GAAuB,UAAUC,EAAV,EAAcC,OAAd,EAAuB;IAC1C;IACA,eAAeC,mBAAf,CAAmCF,EAAnC,EAAuC;MACnC,IAAIG,QAAQ,GAAG,MAAMpC,GAAG,CAACqC,eAAJ,CAAoBJ,EAApB,CAArB;;MACA,IAAIG,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;QACvB,IAAId,QAAQ,GAAGW,QAAQ,CAACE,IAAT,CAAcE,OAA7B;QACAf,QAAQ,CAACgB,IAAT,GAAgBP,OAAhB;;QACA,eAAeQ,UAAf,CAA0BjB,QAA1B,EAAoC;UAChC;UACAW,QAAQ,GAAG,MAAMpC,GAAG,CAAC2C,kBAAJ,CAAuBlB,QAAQ,CAACmB,GAAhC,EAAqCnB,QAArC,CAAjB;;UACA,IAAIW,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;YACvB,eAAeM,YAAf,CAA4BpB,QAA5B,EAAsC;cAClCW,QAAQ,GAAG,MAAMpC,GAAG,CAAC8C,gBAAJ,EAAjB;;cACA,IAAIV,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;gBACvB,IAAIQ,UAAU,GAAGX,QAAQ,CAACE,IAAT,CAActB,WAA/B;gBACAK,YAAY,CAAC;kBACTE,IAAI,EAAErB,qBAAqB,CAACC,gBADnB;kBAETqB,OAAO,EAAE;oBACLR,WAAW,EAAE+B,UADR;oBAELtB,QAAQ,EAAEA;kBAFL;gBAFA,CAAD,CAAZ;cAOH;YACJ;;YACDoB,YAAY,CAACpB,QAAD,CAAZ;UACH;QACJ;;QACDiB,UAAU,CAACjB,QAAD,CAAV;MACH;IACJ;;IACDU,mBAAmB,CAACF,EAAD,CAAnB;EACH,CA/BD,CA7IgC,CA8KhC;;;EACAnB,KAAK,CAACkC,gBAAN,GAAyB,YAAY;IACjC3B,YAAY,CAAC;MACTE,IAAI,EAAErB,qBAAqB,CAACE,kBADnB;MAEToB,OAAO,EAAE;IAFA,CAAD,CAAZ;EAIH,CALD;;EAOAV,KAAK,CAACmC,aAAN,GAAsB,YAAY;IAC9B,eAAeC,mBAAf,GAAqC;MACjCtB,OAAO,CAACC,GAAR,CAAY,MAAZ;MACA,MAAMsB,IAAI,GAAG;QAAEV,IAAI,EAAE;MAAR,CAAb;MACA,MAAML,QAAQ,GAAG,MAAMpC,GAAG,CAACoD,cAAJ,CAAmBD,IAAnB,CAAvB;;MACA,IAAIf,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;QACvB,IAAIc,MAAM,GAAG,MAAMrD,GAAG,CAAC8C,gBAAJ,EAAnB;QACA,IAAIC,UAAU,GAAGM,MAAM,CAACf,IAAP,CAAYtB,WAA7B;QACAK,YAAY,CAAC;UACTE,IAAI,EAAErB,qBAAqB,CAACG,eADnB;UAETmB,OAAO,EAAEuB;QAFA,CAAD,CAAZ;QAIAjC,KAAK,CAACwC,cAAN,CAAqBP,UAAU,CAACA,UAAU,CAACQ,MAAX,GAAoB,CAArB,CAAV,CAAkCX,GAAvD;MACH,CARD,MAUK;QACDhB,OAAO,CAACC,GAAR,CAAY,kCAAZ;MACH;IACJ;;IACDqB,mBAAmB;EACtB,CApBD;EAsBA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EAEIpC,KAAK,CAAC0C,UAAN,GAAmB,UAAUvB,EAAV,EAAc;IAC7BL,OAAO,CAACC,GAAR,CAAY,oBAAoBI,EAAhC;;IACA,eAAewB,eAAf,CAA+BC,OAA/B,EAAwC;MACpC,MAAMtB,QAAQ,GAAG,MAAMpC,GAAG,CAAC2D,cAAJ,CAAmBD,OAAnB,CAAvB;;MACA,IAAItB,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;QACvB,IAAIc,MAAM,GAAG,MAAMrD,GAAG,CAAC8C,gBAAJ,EAAnB;QACA,IAAIC,UAAU,GAAGM,MAAM,CAACf,IAAP,CAAYtB,WAA7B;QACAK,YAAY,CAAC;UACTE,IAAI,EAAErB,qBAAqB,CAACG,eADnB;UAETmB,OAAO,EAAEuB;QAFA,CAAD,CAAZ;QAIAjC,KAAK,CAAC8C,mBAAN,CAA0BF,OAA1B;MACH,CARD,MASK;QACD9B,OAAO,CAACC,GAAR,CAAY,kCAAZ;MACH;IACJ;;IACD4B,eAAe,CAACxB,EAAD,CAAf;EACH,CAlBD;EAoBA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EAKInB,KAAK,CAAC+C,OAAN,GAAgB,YAAY;IACxB,eAAeC,YAAf,GAA8B;MAC1B,IAAIC,IAAI,GAAGjD,KAAK,CAACG,WAAjB;MACA,IAAI+C,IAAI,GAAG;QACP,SAAS,UADF;QAEP,UAAU,SAFH;QAGP,aAAa;MAHN,CAAX;MAKAD,IAAI,CAACE,KAAL,CAAWC,IAAX,CAAgBF,IAAhB;MACA,MAAMhE,GAAG,CAACmE,WAAJ,CAAgBJ,IAAI,CAACnB,GAArB,EAA0BmB,IAA1B,CAAN;MACAjD,KAAK,CAACwC,cAAN,CAAqBS,IAAI,CAACnB,GAA1B;IACH;;IACDkB,YAAY;EACf,CAbD;EAgBA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAII;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAGI;;;EACAhD,KAAK,CAACsD,eAAN,GAAwB,YAAY;IAChC,eAAeC,oBAAf,GAAsC;MAClC,MAAMjC,QAAQ,GAAG,MAAMpC,GAAG,CAAC8C,gBAAJ,EAAvB;;MACA,IAAIV,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;QACvB,IAAIQ,UAAU,GAAGX,QAAQ,CAACE,IAAT,CAActB,WAA/B;QACAK,YAAY,CAAC;UACTE,IAAI,EAAErB,qBAAqB,CAACI,kBADnB;UAETkB,OAAO,EAAEuB;QAFA,CAAD,CAAZ;MAIH,CAND,MAOK;QACDnB,OAAO,CAACC,GAAR,CAAY,kCAAZ;MACH;IACJ;;IACDwC,oBAAoB;EACvB,CAfD;;EAiBAvD,KAAK,CAACwC,cAAN,GAAuB,UAAUrB,EAAV,EAAc;IACjC,eAAeqC,mBAAf,CAAmCrC,EAAnC,EAAuC;MACnC,IAAIG,QAAQ,GAAG,MAAMpC,GAAG,CAACqC,eAAJ,CAAoBJ,EAApB,CAArB;;MACA,IAAIG,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;QACvB,IAAId,QAAQ,GAAGW,QAAQ,CAACE,IAAT,CAAcb,QAA7B;;QAEA,IAAIW,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;UACvBlB,YAAY,CAAC;YACTE,IAAI,EAAErB,qBAAqB,CAACK,gBADnB;YAETiB,OAAO,EAAEC;UAFA,CAAD,CAAZ;UAIAX,KAAK,CAACyD,OAAN,CAAcL,IAAd,CAAmB,eAAezC,QAAQ,CAACmB,GAA3C;QACH;MACJ;IACJ;;IACD0B,mBAAmB,CAACrC,EAAD,CAAnB;EACH,CAhBD;;EAiBAnB,KAAK,CAAC0D,eAAN,GAAwB,YAAY;IAChC,OAAO1D,KAAK,CAACG,WAAN,CAAkBgD,KAAlB,CAAwBV,MAA/B;EACH,CAFD;;EAGAzC,KAAK,CAAC2D,IAAN,GAAa,YAAY;IACrB7D,GAAG,CAAC8D,eAAJ;EACH,CAFD;;EAGA5D,KAAK,CAAC6D,IAAN,GAAa,YAAY;IACrB/D,GAAG,CAACgE,aAAJ;EACH,CAFD,CAxYgC,CA4YhC;;;EACA9D,KAAK,CAAC+D,iBAAN,GAA0B,YAAY;IAClCxD,YAAY,CAAC;MACTE,IAAI,EAAErB,qBAAqB,CAACM,yBADnB;MAETgB,OAAO,EAAE;IAFA,CAAD,CAAZ;EAIH,CALD;;EAOAV,KAAK,CAACgE,mBAAN,GAA4B,UAAU7C,EAAV,EAAc;IACtC,IAAI8C,KAAK,GAAGC,QAAQ,CAACC,cAAT,CAAwB,mBAAxB,CAAZ;IACAF,KAAK,CAACG,SAAN,CAAgBC,GAAhB,CAAoB,YAApB;IACAvD,OAAO,CAACC,GAAR,CAAY,eAAZ;IACAD,OAAO,CAACC,GAAR,CAAY,YAAYI,EAAxB;IACAZ,YAAY,CAAC;MACTE,IAAI,EAAErB,qBAAqB,CAACyB,sBADnB;MAETH,OAAO,EAAES;IAFA,CAAD,CAAZ;IAIAL,OAAO,CAACC,GAAR,CAAYf,KAAK,CAACM,YAAlB;EACH,CAVD;;EAYAN,KAAK,CAAC8C,mBAAN,GAA4B,YAAY;IACpChC,OAAO,CAACC,GAAR,CAAY,cAAZ;IACA,IAAIkD,KAAK,GAAGC,QAAQ,CAACC,cAAT,CAAwB,mBAAxB,CAAZ;;IACA,IAAIF,KAAK,KAAK,IAAd,EAAoB;MAChBA,KAAK,CAACG,SAAN,CAAgBE,MAAhB,CAAuB,YAAvB;MACA/D,YAAY,CAAC;QACTE,IAAI,EAAErB,qBAAqB,CAACQ,sBADnB;QAETc,OAAO,EAAE;MAFA,CAAD,CAAZ;IAIH;EACJ,CAVD,CAhagC,CA4ahC;;;EACA,OAAO;IAAEV,KAAF;IAASO;EAAT,CAAP;AACH,CA9aM;;GAAMR,c"},"metadata":{},"sourceType":"module"}