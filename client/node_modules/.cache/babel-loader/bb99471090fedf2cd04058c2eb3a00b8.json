{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { createContext, useState } from 'react';\nimport jsTPS from '../common/jsTPS';\nimport api from '../api';\nexport const GlobalStoreContext = /*#__PURE__*/createContext({});\n/*\r\n    This is our global data store. Note that it uses the Flux design pattern,\r\n    which makes use of things like actions and reducers. \r\n    \r\n    @author McKilla Gorilla\r\n*/\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\n\nexport const GlobalStoreActionType = {\n  CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n  CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n  CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n  LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n  SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n  SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n  SHOW_DELETE_LIST_MODAL: \"SHOW_DELETE_LIST_MODAL\",\n  HIDE_DELETE_LIST_MODAL: \"HIDE_DELETE_LIST_MODAL\"\n}; // WE'LL NEED THIS TO PROCESS TRANSACTIONS\n\nconst tps = new jsTPS(); // WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\n\nexport const useGlobalStore = () => {\n  _s();\n\n  // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n  const [store, setStore] = useState({\n    idNamePairs: [],\n    currentList: null,\n    newListCounter: 0,\n    listNameActive: false,\n    deleteListId: null\n  }); // HERE'S THE DATA STORE'S REDUCER, IT MUST\n  // HANDLE EVERY TYPE OF STATE CHANGE\n\n  const storeReducer = action => {\n    const {\n      type,\n      payload\n    } = action;\n\n    switch (type) {\n      // LIST UPDATE OF ITS NAME\n      case GlobalStoreActionType.CHANGE_LIST_NAME:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: payload.playlist,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            deleteListId: null\n          });\n        }\n      // STOP EDITING THE CURRENT LIST\n\n      case GlobalStoreActionType.CLOSE_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            deleteListId: null\n          });\n        }\n      // CREATE A NEW LIST\n\n      case GlobalStoreActionType.CREATE_NEW_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter + 1,\n            listNameActive: false,\n            deleteListId: null\n          });\n        }\n      // GET ALL THE LISTS SO WE CAN PRESENT THEM\n\n      case GlobalStoreActionType.LOAD_ID_NAME_PAIRS:\n        {\n          return setStore({\n            idNamePairs: payload,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            deleteListId: null\n          });\n        }\n      // PREPARE TO DELETE A LIST\n\n      case GlobalStoreActionType.MARK_LIST_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            deleteListId: payload\n          });\n        }\n      // UPDATE A LIST\n\n      case GlobalStoreActionType.SET_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            deleteListId: null\n          });\n        }\n\n      case GlobalStoreActionType.DELETE_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            deleteListId: null\n          });\n        }\n      // START EDITING A LIST NAME\n\n      case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: true,\n            deleteListId: null\n          });\n        }\n\n      case GlobalStoreActionType.SHOW_DELETE_LIST_MODAL:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            listNameActive: store.currentList,\n            deleteListId: store.deleteListId\n          });\n        }\n\n      case GlobalStoreActionType.HIDE_DELETE_LIST_MODAL:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: store.currentList,\n            deleteListId: null\n          });\n        }\n\n      default:\n        return store;\n    }\n  }; // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n  // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n  // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n  // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n\n\n  store.changeListName = function (id, newName) {\n    // GET THE LIST\n    async function asyncChangeListName(id) {\n      let response = await api.getPlaylistById(id);\n\n      if (response.data.success) {\n        let playlist = response.data.playist;\n        playlist.name = newName;\n\n        async function updateList(playlist) {\n          // IMPLEMENT THIS \n          response = await api.updatePlaylistById(playlist._id, playlist);\n\n          if (response.data.success) {\n            async function getListPairs(playlist) {\n              response = await api.getPlaylistPairs();\n\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                  payload: {\n                    idNamePairs: pairsArray,\n                    playlist: playlist\n                  }\n                });\n              }\n            }\n\n            getListPairs(playlist);\n          }\n        }\n\n        updateList(playlist);\n      }\n    }\n\n    asyncChangeListName(id);\n  }; // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n\n\n  store.closeCurrentList = function () {\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n      payload: {}\n    });\n  };\n\n  store.createNewList = function () {\n    async function asyncCreatePlayList() {\n      console.log(\"poop\");\n      const body = {\n        name: \"Untitled\"\n      };\n      const response = await api.createPlaylist(body);\n\n      if (response.data.success) {\n        let result = await api.getPlaylistPairs();\n        let pairsArray = result.data.idNamePairs;\n        storeReducer({\n          type: GlobalStoreActionType.CREATE_NEW_LIST,\n          payload: pairsArray\n        });\n        store.setCurrentList(pairsArray[pairsArray.length - 1]._id);\n      } else {\n        console.log(\"API FAILED TO GET THE LIST PAIRS\");\n      }\n    }\n\n    asyncCreatePlayList();\n  };\n\n  store.markListForDeletion = function (id) {\n    console.log(id);\n    storeReducer({\n      type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n      payload: id\n    });\n    store.showDeleteListModal();\n  };\n\n  store.deleteList = function () {\n    async function asyncDeleteList() {\n      let id = store.deleteListId;\n      const response = await api.deletePlaylist(id);\n      console.log(\"test\");\n\n      if (response.data.success) {\n        let result = await api.getPlaylistPairs();\n        let pairsArray = result.data.idNamePairs;\n        storeReducer({\n          type: GlobalStoreActionType.CREATE_NEW_LIST,\n          payload: pairsArray\n        });\n        store.hideDeleteListModal();\n      } else {\n        console.log(\"API FAILED TO GET THE LIST PAIRS\");\n      }\n    }\n\n    asyncDeleteList();\n  }; // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n\n\n  store.loadIdNamePairs = function () {\n    async function asyncLoadIdNamePairs() {\n      const response = await api.getPlaylistPairs();\n\n      if (response.data.success) {\n        let pairsArray = response.data.idNamePairs;\n        storeReducer({\n          type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n          payload: pairsArray\n        });\n      } else {\n        console.log(\"API FAILED TO GET THE LIST PAIRS\");\n      }\n    }\n\n    asyncLoadIdNamePairs();\n  };\n\n  store.setCurrentList = function (id) {\n    async function asyncSetCurrentList(id) {\n      let response = await api.getPlaylistById(id);\n\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.SET_CURRENT_LIST,\n            payload: playlist\n          });\n          store.history.push(\"/playlist/\" + playlist._id);\n        }\n      }\n    }\n\n    asyncSetCurrentList(id);\n  };\n\n  store.getPlaylistSize = function () {\n    return store.currentList.songs.length;\n  };\n\n  store.undo = function () {\n    tps.undoTransaction();\n  };\n\n  store.redo = function () {\n    tps.doTransaction();\n  }; // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n\n\n  store.setlistNameActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n      payload: null\n    });\n  };\n\n  store.showDeleteListModal = function () {\n    let modal = document.getElementById(\"delete-list-modal\");\n    modal.classList.add(\"is-visible\");\n    storeReducer({\n      type: GlobalStoreActionType.SHOW_DELETE_LIST_MODAL,\n      payload: null\n    });\n  };\n\n  store.hideDeleteListModal = function () {\n    let modal = document.getElementById(\"delete-list-modal\");\n    modal.classList.remove(\"is-visible\");\n    storeReducer({\n      type: GlobalStoreActionType.HIDE_DELETE_LIST_MODAL,\n      payload: null\n    });\n  }; // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n\n\n  return {\n    store,\n    storeReducer\n  };\n};\n\n_s(useGlobalStore, \"DR94sOwUAaA3i9jjdEuqGDWLww8=\");","map":{"version":3,"names":["createContext","useState","jsTPS","api","GlobalStoreContext","GlobalStoreActionType","CHANGE_LIST_NAME","CLOSE_CURRENT_LIST","CREATE_NEW_LIST","LOAD_ID_NAME_PAIRS","SET_CURRENT_LIST","SET_LIST_NAME_EDIT_ACTIVE","SHOW_DELETE_LIST_MODAL","HIDE_DELETE_LIST_MODAL","tps","useGlobalStore","store","setStore","idNamePairs","currentList","newListCounter","listNameActive","deleteListId","storeReducer","action","type","payload","playlist","MARK_LIST_FOR_DELETION","DELETE_LIST","changeListName","id","newName","asyncChangeListName","response","getPlaylistById","data","success","playist","name","updateList","updatePlaylistById","_id","getListPairs","getPlaylistPairs","pairsArray","closeCurrentList","createNewList","asyncCreatePlayList","console","log","body","createPlaylist","result","setCurrentList","length","markListForDeletion","showDeleteListModal","deleteList","asyncDeleteList","deletePlaylist","hideDeleteListModal","loadIdNamePairs","asyncLoadIdNamePairs","asyncSetCurrentList","history","push","getPlaylistSize","songs","undo","undoTransaction","redo","doTransaction","setlistNameActive","modal","document","getElementById","classList","add","remove"],"sources":["C:/Users/haodu/OneDrive/Desktop/New folder (2)/d/client/src/store/index.js"],"sourcesContent":["import { createContext, useState } from 'react'\r\nimport jsTPS from '../common/jsTPS'\r\nimport api from '../api'\r\nexport const GlobalStoreContext = createContext({});\r\n/*\r\n    This is our global data store. Note that it uses the Flux design pattern,\r\n    which makes use of things like actions and reducers. \r\n    \r\n    @author McKilla Gorilla\r\n*/\r\n\r\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\r\n// DATA STORE STATE THAT CAN BE PROCESSED\r\nexport const GlobalStoreActionType = {\r\n    CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\r\n    CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\r\n    CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\r\n    LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\r\n    SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\r\n    SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\r\n    SHOW_DELETE_LIST_MODAL: \"SHOW_DELETE_LIST_MODAL\",\r\n    HIDE_DELETE_LIST_MODAL: \"HIDE_DELETE_LIST_MODAL\",\r\n}\r\n\r\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\r\nconst tps = new jsTPS();\r\n\r\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\r\n// AVAILABLE TO THE REST OF THE APPLICATION\r\nexport const useGlobalStore = () => {\r\n    // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\r\n    const [store, setStore] = useState({\r\n        idNamePairs: [],\r\n        currentList: null,\r\n        newListCounter: 0,\r\n        listNameActive: false,\r\n        deleteListId: null\r\n    });\r\n\r\n    // HERE'S THE DATA STORE'S REDUCER, IT MUST\r\n    // HANDLE EVERY TYPE OF STATE CHANGE\r\n    const storeReducer = (action) => {\r\n        const { type, payload } = action;\r\n        switch (type) {\r\n            // LIST UPDATE OF ITS NAME\r\n            case GlobalStoreActionType.CHANGE_LIST_NAME: {\r\n                return setStore({\r\n                    idNamePairs: payload.idNamePairs,\r\n                    currentList: payload.playlist,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: false,\r\n                    deleteListId: null\r\n                });\r\n            }\r\n            // STOP EDITING THE CURRENT LIST\r\n            case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: null,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: false,\r\n                    deleteListId: null\r\n                })\r\n            }\r\n            // CREATE A NEW LIST\r\n            case GlobalStoreActionType.CREATE_NEW_LIST: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: payload,\r\n                    newListCounter: store.newListCounter + 1,\r\n                    listNameActive: false,\r\n                    deleteListId: null\r\n                })\r\n            }\r\n            // GET ALL THE LISTS SO WE CAN PRESENT THEM\r\n            case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\r\n                return setStore({\r\n                    idNamePairs: payload,\r\n                    currentList: null,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: false,\r\n                    deleteListId: null\r\n                });\r\n            }\r\n            // PREPARE TO DELETE A LIST\r\n            case GlobalStoreActionType.MARK_LIST_FOR_DELETION: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: null,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: false,\r\n                    deleteListId: payload\r\n                });\r\n            }\r\n            \r\n            // UPDATE A LIST\r\n            case GlobalStoreActionType.SET_CURRENT_LIST: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: payload,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: false,\r\n                    deleteListId: null\r\n                });\r\n            }\r\n            case GlobalStoreActionType.DELETE_LIST: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: payload,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: false,\r\n                    deleteListId: null\r\n                });\r\n            }\r\n            // START EDITING A LIST NAME\r\n            case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: payload,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: true,\r\n                    deleteListId: null\r\n                });\r\n            }\r\n\r\n            case GlobalStoreActionType.SHOW_DELETE_LIST_MODAL: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: store.currentList,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: store.currentList,\r\n                    deleteListId: store.deleteListId,\r\n                })\r\n            }\r\n            \r\n            case GlobalStoreActionType.HIDE_DELETE_LIST_MODAL: {\r\n                return setStore({\r\n                    idNamePairs: store.idNamePairs,\r\n                    currentList: null,\r\n                    newListCounter: store.newListCounter,\r\n                    listNameActive: store.currentList,\r\n                    deleteListId: null,\r\n                })\r\n            }\r\n            default:\r\n                return store;\r\n        }\r\n    }\r\n    // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\r\n    // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \r\n    // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\r\n\r\n    // THIS FUNCTION PROCESSES CHANGING A LIST NAME\r\n    store.changeListName = function (id, newName) {\r\n        // GET THE LIST\r\n        async function asyncChangeListName(id) {\r\n            let response = await api.getPlaylistById(id);\r\n            if (response.data.success) {\r\n                let playlist = response.data.playist;\r\n                playlist.name = newName;\r\n                async function updateList(playlist) {\r\n                    // IMPLEMENT THIS \r\n                    response = await api.updatePlaylistById(playlist._id, playlist);\r\n                    if (response.data.success) {\r\n                        async function getListPairs(playlist) {\r\n                            response = await api.getPlaylistPairs();\r\n                            if (response.data.success) {\r\n                                let pairsArray = response.data.idNamePairs;\r\n                                storeReducer({\r\n                                    type: GlobalStoreActionType.CHANGE_LIST_NAME,\r\n                                    payload: {\r\n                                        idNamePairs: pairsArray,\r\n                                        playlist: playlist\r\n                                    }\r\n                                });\r\n                            }\r\n                        }\r\n                        getListPairs(playlist);\r\n                    }\r\n                }\r\n                updateList(playlist);\r\n            }\r\n        }\r\n        asyncChangeListName(id);\r\n    }\r\n\r\n    // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\r\n    store.closeCurrentList = function () {\r\n        storeReducer({\r\n            type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\r\n            payload: {}\r\n        });\r\n    }\r\n\r\n    store.createNewList = function () {\r\n        async function asyncCreatePlayList() {\r\n            console.log(\"poop\");\r\n            const body = { name: \"Untitled\" }\r\n            const response = await api.createPlaylist(body);\r\n            if (response.data.success) {\r\n                let result = await api.getPlaylistPairs();\r\n                let pairsArray = result.data.idNamePairs;\r\n                storeReducer({\r\n                    type: GlobalStoreActionType.CREATE_NEW_LIST,\r\n                    payload: pairsArray\r\n                })\r\n                store.setCurrentList(pairsArray[pairsArray.length-1]._id);\r\n            }\r\n                \r\n                else{\r\n                    console.log(\"API FAILED TO GET THE LIST PAIRS\");\r\n                }\r\n            }\r\n            asyncCreatePlayList();\r\n        }\r\n        \r\n    store.markListForDeletion = function (id) {\r\n        console.log(id);\r\n        storeReducer({\r\n            type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\r\n            payload: id\r\n        })\r\n        store.showDeleteListModal();\r\n    }\r\n    store.deleteList = function () {\r\n        async function asyncDeleteList() {\r\n            let id = store.deleteListId;\r\n            const response = await api.deletePlaylist(id);\r\n            console.log(\"test\")\r\n            if (response.data.success){\r\n                let result = await api.getPlaylistPairs();\r\n                let pairsArray = result.data.idNamePairs;\r\n                storeReducer({\r\n                    type: GlobalStoreActionType.CREATE_NEW_LIST,\r\n                    payload: pairsArray\r\n                })\r\n                store.hideDeleteListModal();\r\n            }\r\n            else{\r\n                console.log(\"API FAILED TO GET THE LIST PAIRS\");\r\n                }\r\n            }\r\n            asyncDeleteList()\r\n        }\r\n    \r\n    // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\r\n    store.loadIdNamePairs = function () {\r\n        async function asyncLoadIdNamePairs() {\r\n            const response = await api.getPlaylistPairs();\r\n            if (response.data.success) {\r\n                let pairsArray = response.data.idNamePairs;\r\n                storeReducer({\r\n                    type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\r\n                    payload: pairsArray\r\n                });\r\n            }\r\n            else {\r\n                console.log(\"API FAILED TO GET THE LIST PAIRS\");\r\n            }\r\n        }\r\n        asyncLoadIdNamePairs();\r\n    }\r\n\r\n    store.setCurrentList = function (id) {\r\n        async function asyncSetCurrentList(id) {\r\n            let response = await api.getPlaylistById(id);\r\n            if (response.data.success) {\r\n                let playlist = response.data.playlist;\r\n\r\n                if (response.data.success) {\r\n                    storeReducer({\r\n                        type: GlobalStoreActionType.SET_CURRENT_LIST,\r\n                        payload: playlist\r\n                    });\r\n                    store.history.push(\"/playlist/\" + playlist._id);\r\n                }\r\n            }\r\n        }\r\n        asyncSetCurrentList(id);\r\n    }\r\n    store.getPlaylistSize = function() {\r\n        return store.currentList.songs.length;\r\n    }\r\n    store.undo = function () {\r\n        tps.undoTransaction();\r\n    }\r\n    store.redo = function () {\r\n        tps.doTransaction();\r\n    }\r\n\r\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\r\n    store.setlistNameActive = function () {\r\n        storeReducer({\r\n            type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\r\n            payload: null\r\n        });\r\n    }\r\n\r\n    store.showDeleteListModal = function () {\r\n        let modal = document.getElementById(\"delete-list-modal\");\r\n        modal.classList.add(\"is-visible\");\r\n        storeReducer({\r\n            type: GlobalStoreActionType.SHOW_DELETE_LIST_MODAL,\r\n            payload: null\r\n        })\r\n    }\r\n\r\n    store.hideDeleteListModal = function () {\r\n        let modal = document.getElementById(\"delete-list-modal\");\r\n        modal.classList.remove(\"is-visible\");\r\n        storeReducer({\r\n            type: GlobalStoreActionType.HIDE_DELETE_LIST_MODAL,\r\n            payload: null\r\n        })\r\n    }\r\n\r\n    // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\r\n    return { store, storeReducer };\r\n}"],"mappings":";;AAAA,SAASA,aAAT,EAAwBC,QAAxB,QAAwC,OAAxC;AACA,OAAOC,KAAP,MAAkB,iBAAlB;AACA,OAAOC,GAAP,MAAgB,QAAhB;AACA,OAAO,MAAMC,kBAAkB,gBAAGJ,aAAa,CAAC,EAAD,CAAxC;AACP;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AACA,OAAO,MAAMK,qBAAqB,GAAG;EACjCC,gBAAgB,EAAE,kBADe;EAEjCC,kBAAkB,EAAE,oBAFa;EAGjCC,eAAe,EAAE,iBAHgB;EAIjCC,kBAAkB,EAAE,oBAJa;EAKjCC,gBAAgB,EAAE,kBALe;EAMjCC,yBAAyB,EAAE,2BANM;EAOjCC,sBAAsB,EAAE,wBAPS;EAQjCC,sBAAsB,EAAE;AARS,CAA9B,C,CAWP;;AACA,MAAMC,GAAG,GAAG,IAAIZ,KAAJ,EAAZ,C,CAEA;AACA;;AACA,OAAO,MAAMa,cAAc,GAAG,MAAM;EAAA;;EAChC;EACA,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBhB,QAAQ,CAAC;IAC/BiB,WAAW,EAAE,EADkB;IAE/BC,WAAW,EAAE,IAFkB;IAG/BC,cAAc,EAAE,CAHe;IAI/BC,cAAc,EAAE,KAJe;IAK/BC,YAAY,EAAE;EALiB,CAAD,CAAlC,CAFgC,CAUhC;EACA;;EACA,MAAMC,YAAY,GAAIC,MAAD,IAAY;IAC7B,MAAM;MAAEC,IAAF;MAAQC;IAAR,IAAoBF,MAA1B;;IACA,QAAQC,IAAR;MACI;MACA,KAAKpB,qBAAqB,CAACC,gBAA3B;QAA6C;UACzC,OAAOW,QAAQ,CAAC;YACZC,WAAW,EAAEQ,OAAO,CAACR,WADT;YAEZC,WAAW,EAAEO,OAAO,CAACC,QAFT;YAGZP,cAAc,EAAEJ,KAAK,CAACI,cAHV;YAIZC,cAAc,EAAE,KAJJ;YAKZC,YAAY,EAAE;UALF,CAAD,CAAf;QAOH;MACD;;MACA,KAAKjB,qBAAqB,CAACE,kBAA3B;QAA+C;UAC3C,OAAOU,QAAQ,CAAC;YACZC,WAAW,EAAEF,KAAK,CAACE,WADP;YAEZC,WAAW,EAAE,IAFD;YAGZC,cAAc,EAAEJ,KAAK,CAACI,cAHV;YAIZC,cAAc,EAAE,KAJJ;YAKZC,YAAY,EAAE;UALF,CAAD,CAAf;QAOH;MACD;;MACA,KAAKjB,qBAAqB,CAACG,eAA3B;QAA4C;UACxC,OAAOS,QAAQ,CAAC;YACZC,WAAW,EAAEF,KAAK,CAACE,WADP;YAEZC,WAAW,EAAEO,OAFD;YAGZN,cAAc,EAAEJ,KAAK,CAACI,cAAN,GAAuB,CAH3B;YAIZC,cAAc,EAAE,KAJJ;YAKZC,YAAY,EAAE;UALF,CAAD,CAAf;QAOH;MACD;;MACA,KAAKjB,qBAAqB,CAACI,kBAA3B;QAA+C;UAC3C,OAAOQ,QAAQ,CAAC;YACZC,WAAW,EAAEQ,OADD;YAEZP,WAAW,EAAE,IAFD;YAGZC,cAAc,EAAEJ,KAAK,CAACI,cAHV;YAIZC,cAAc,EAAE,KAJJ;YAKZC,YAAY,EAAE;UALF,CAAD,CAAf;QAOH;MACD;;MACA,KAAKjB,qBAAqB,CAACuB,sBAA3B;QAAmD;UAC/C,OAAOX,QAAQ,CAAC;YACZC,WAAW,EAAEF,KAAK,CAACE,WADP;YAEZC,WAAW,EAAE,IAFD;YAGZC,cAAc,EAAEJ,KAAK,CAACI,cAHV;YAIZC,cAAc,EAAE,KAJJ;YAKZC,YAAY,EAAEI;UALF,CAAD,CAAf;QAOH;MAED;;MACA,KAAKrB,qBAAqB,CAACK,gBAA3B;QAA6C;UACzC,OAAOO,QAAQ,CAAC;YACZC,WAAW,EAAEF,KAAK,CAACE,WADP;YAEZC,WAAW,EAAEO,OAFD;YAGZN,cAAc,EAAEJ,KAAK,CAACI,cAHV;YAIZC,cAAc,EAAE,KAJJ;YAKZC,YAAY,EAAE;UALF,CAAD,CAAf;QAOH;;MACD,KAAKjB,qBAAqB,CAACwB,WAA3B;QAAwC;UACpC,OAAOZ,QAAQ,CAAC;YACZC,WAAW,EAAEF,KAAK,CAACE,WADP;YAEZC,WAAW,EAAEO,OAFD;YAGZN,cAAc,EAAEJ,KAAK,CAACI,cAHV;YAIZC,cAAc,EAAE,KAJJ;YAKZC,YAAY,EAAE;UALF,CAAD,CAAf;QAOH;MACD;;MACA,KAAKjB,qBAAqB,CAACM,yBAA3B;QAAsD;UAClD,OAAOM,QAAQ,CAAC;YACZC,WAAW,EAAEF,KAAK,CAACE,WADP;YAEZC,WAAW,EAAEO,OAFD;YAGZN,cAAc,EAAEJ,KAAK,CAACI,cAHV;YAIZC,cAAc,EAAE,IAJJ;YAKZC,YAAY,EAAE;UALF,CAAD,CAAf;QAOH;;MAED,KAAKjB,qBAAqB,CAACO,sBAA3B;QAAmD;UAC/C,OAAOK,QAAQ,CAAC;YACZC,WAAW,EAAEF,KAAK,CAACE,WADP;YAEZC,WAAW,EAAEH,KAAK,CAACG,WAFP;YAGZC,cAAc,EAAEJ,KAAK,CAACI,cAHV;YAIZC,cAAc,EAAEL,KAAK,CAACG,WAJV;YAKZG,YAAY,EAAEN,KAAK,CAACM;UALR,CAAD,CAAf;QAOH;;MAED,KAAKjB,qBAAqB,CAACQ,sBAA3B;QAAmD;UAC/C,OAAOI,QAAQ,CAAC;YACZC,WAAW,EAAEF,KAAK,CAACE,WADP;YAEZC,WAAW,EAAE,IAFD;YAGZC,cAAc,EAAEJ,KAAK,CAACI,cAHV;YAIZC,cAAc,EAAEL,KAAK,CAACG,WAJV;YAKZG,YAAY,EAAE;UALF,CAAD,CAAf;QAOH;;MACD;QACI,OAAON,KAAP;IAtGR;EAwGH,CA1GD,CAZgC,CAuHhC;EACA;EACA;EAEA;;;EACAA,KAAK,CAACc,cAAN,GAAuB,UAAUC,EAAV,EAAcC,OAAd,EAAuB;IAC1C;IACA,eAAeC,mBAAf,CAAmCF,EAAnC,EAAuC;MACnC,IAAIG,QAAQ,GAAG,MAAM/B,GAAG,CAACgC,eAAJ,CAAoBJ,EAApB,CAArB;;MACA,IAAIG,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;QACvB,IAAIV,QAAQ,GAAGO,QAAQ,CAACE,IAAT,CAAcE,OAA7B;QACAX,QAAQ,CAACY,IAAT,GAAgBP,OAAhB;;QACA,eAAeQ,UAAf,CAA0Bb,QAA1B,EAAoC;UAChC;UACAO,QAAQ,GAAG,MAAM/B,GAAG,CAACsC,kBAAJ,CAAuBd,QAAQ,CAACe,GAAhC,EAAqCf,QAArC,CAAjB;;UACA,IAAIO,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;YACvB,eAAeM,YAAf,CAA4BhB,QAA5B,EAAsC;cAClCO,QAAQ,GAAG,MAAM/B,GAAG,CAACyC,gBAAJ,EAAjB;;cACA,IAAIV,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;gBACvB,IAAIQ,UAAU,GAAGX,QAAQ,CAACE,IAAT,CAAclB,WAA/B;gBACAK,YAAY,CAAC;kBACTE,IAAI,EAAEpB,qBAAqB,CAACC,gBADnB;kBAEToB,OAAO,EAAE;oBACLR,WAAW,EAAE2B,UADR;oBAELlB,QAAQ,EAAEA;kBAFL;gBAFA,CAAD,CAAZ;cAOH;YACJ;;YACDgB,YAAY,CAAChB,QAAD,CAAZ;UACH;QACJ;;QACDa,UAAU,CAACb,QAAD,CAAV;MACH;IACJ;;IACDM,mBAAmB,CAACF,EAAD,CAAnB;EACH,CA/BD,CA5HgC,CA6JhC;;;EACAf,KAAK,CAAC8B,gBAAN,GAAyB,YAAY;IACjCvB,YAAY,CAAC;MACTE,IAAI,EAAEpB,qBAAqB,CAACE,kBADnB;MAETmB,OAAO,EAAE;IAFA,CAAD,CAAZ;EAIH,CALD;;EAOAV,KAAK,CAAC+B,aAAN,GAAsB,YAAY;IAC9B,eAAeC,mBAAf,GAAqC;MACjCC,OAAO,CAACC,GAAR,CAAY,MAAZ;MACA,MAAMC,IAAI,GAAG;QAAEZ,IAAI,EAAE;MAAR,CAAb;MACA,MAAML,QAAQ,GAAG,MAAM/B,GAAG,CAACiD,cAAJ,CAAmBD,IAAnB,CAAvB;;MACA,IAAIjB,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;QACvB,IAAIgB,MAAM,GAAG,MAAMlD,GAAG,CAACyC,gBAAJ,EAAnB;QACA,IAAIC,UAAU,GAAGQ,MAAM,CAACjB,IAAP,CAAYlB,WAA7B;QACAK,YAAY,CAAC;UACTE,IAAI,EAAEpB,qBAAqB,CAACG,eADnB;UAETkB,OAAO,EAAEmB;QAFA,CAAD,CAAZ;QAIA7B,KAAK,CAACsC,cAAN,CAAqBT,UAAU,CAACA,UAAU,CAACU,MAAX,GAAkB,CAAnB,CAAV,CAAgCb,GAArD;MACH,CARD,MAUQ;QACAO,OAAO,CAACC,GAAR,CAAY,kCAAZ;MACH;IACJ;;IACDF,mBAAmB;EACtB,CApBL;;EAsBAhC,KAAK,CAACwC,mBAAN,GAA4B,UAAUzB,EAAV,EAAc;IACtCkB,OAAO,CAACC,GAAR,CAAYnB,EAAZ;IACAR,YAAY,CAAC;MACTE,IAAI,EAAEpB,qBAAqB,CAACuB,sBADnB;MAETF,OAAO,EAAEK;IAFA,CAAD,CAAZ;IAIAf,KAAK,CAACyC,mBAAN;EACH,CAPD;;EAQAzC,KAAK,CAAC0C,UAAN,GAAmB,YAAY;IAC3B,eAAeC,eAAf,GAAiC;MAC7B,IAAI5B,EAAE,GAAGf,KAAK,CAACM,YAAf;MACA,MAAMY,QAAQ,GAAG,MAAM/B,GAAG,CAACyD,cAAJ,CAAmB7B,EAAnB,CAAvB;MACAkB,OAAO,CAACC,GAAR,CAAY,MAAZ;;MACA,IAAIhB,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA0B;QACtB,IAAIgB,MAAM,GAAG,MAAMlD,GAAG,CAACyC,gBAAJ,EAAnB;QACA,IAAIC,UAAU,GAAGQ,MAAM,CAACjB,IAAP,CAAYlB,WAA7B;QACAK,YAAY,CAAC;UACTE,IAAI,EAAEpB,qBAAqB,CAACG,eADnB;UAETkB,OAAO,EAAEmB;QAFA,CAAD,CAAZ;QAIA7B,KAAK,CAAC6C,mBAAN;MACH,CARD,MASI;QACAZ,OAAO,CAACC,GAAR,CAAY,kCAAZ;MACC;IACJ;;IACDS,eAAe;EAClB,CAnBL,CAnMgC,CAwNhC;;;EACA3C,KAAK,CAAC8C,eAAN,GAAwB,YAAY;IAChC,eAAeC,oBAAf,GAAsC;MAClC,MAAM7B,QAAQ,GAAG,MAAM/B,GAAG,CAACyC,gBAAJ,EAAvB;;MACA,IAAIV,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;QACvB,IAAIQ,UAAU,GAAGX,QAAQ,CAACE,IAAT,CAAclB,WAA/B;QACAK,YAAY,CAAC;UACTE,IAAI,EAAEpB,qBAAqB,CAACI,kBADnB;UAETiB,OAAO,EAAEmB;QAFA,CAAD,CAAZ;MAIH,CAND,MAOK;QACDI,OAAO,CAACC,GAAR,CAAY,kCAAZ;MACH;IACJ;;IACDa,oBAAoB;EACvB,CAfD;;EAiBA/C,KAAK,CAACsC,cAAN,GAAuB,UAAUvB,EAAV,EAAc;IACjC,eAAeiC,mBAAf,CAAmCjC,EAAnC,EAAuC;MACnC,IAAIG,QAAQ,GAAG,MAAM/B,GAAG,CAACgC,eAAJ,CAAoBJ,EAApB,CAArB;;MACA,IAAIG,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;QACvB,IAAIV,QAAQ,GAAGO,QAAQ,CAACE,IAAT,CAAcT,QAA7B;;QAEA,IAAIO,QAAQ,CAACE,IAAT,CAAcC,OAAlB,EAA2B;UACvBd,YAAY,CAAC;YACTE,IAAI,EAAEpB,qBAAqB,CAACK,gBADnB;YAETgB,OAAO,EAAEC;UAFA,CAAD,CAAZ;UAIAX,KAAK,CAACiD,OAAN,CAAcC,IAAd,CAAmB,eAAevC,QAAQ,CAACe,GAA3C;QACH;MACJ;IACJ;;IACDsB,mBAAmB,CAACjC,EAAD,CAAnB;EACH,CAhBD;;EAiBAf,KAAK,CAACmD,eAAN,GAAwB,YAAW;IAC/B,OAAOnD,KAAK,CAACG,WAAN,CAAkBiD,KAAlB,CAAwBb,MAA/B;EACH,CAFD;;EAGAvC,KAAK,CAACqD,IAAN,GAAa,YAAY;IACrBvD,GAAG,CAACwD,eAAJ;EACH,CAFD;;EAGAtD,KAAK,CAACuD,IAAN,GAAa,YAAY;IACrBzD,GAAG,CAAC0D,aAAJ;EACH,CAFD,CAjQgC,CAqQhC;;;EACAxD,KAAK,CAACyD,iBAAN,GAA0B,YAAY;IAClClD,YAAY,CAAC;MACTE,IAAI,EAAEpB,qBAAqB,CAACM,yBADnB;MAETe,OAAO,EAAE;IAFA,CAAD,CAAZ;EAIH,CALD;;EAOAV,KAAK,CAACyC,mBAAN,GAA4B,YAAY;IACpC,IAAIiB,KAAK,GAAGC,QAAQ,CAACC,cAAT,CAAwB,mBAAxB,CAAZ;IACAF,KAAK,CAACG,SAAN,CAAgBC,GAAhB,CAAoB,YAApB;IACAvD,YAAY,CAAC;MACTE,IAAI,EAAEpB,qBAAqB,CAACO,sBADnB;MAETc,OAAO,EAAE;IAFA,CAAD,CAAZ;EAIH,CAPD;;EASAV,KAAK,CAAC6C,mBAAN,GAA4B,YAAY;IACpC,IAAIa,KAAK,GAAGC,QAAQ,CAACC,cAAT,CAAwB,mBAAxB,CAAZ;IACAF,KAAK,CAACG,SAAN,CAAgBE,MAAhB,CAAuB,YAAvB;IACAxD,YAAY,CAAC;MACTE,IAAI,EAAEpB,qBAAqB,CAACQ,sBADnB;MAETa,OAAO,EAAE;IAFA,CAAD,CAAZ;EAIH,CAPD,CAtRgC,CA+RhC;;;EACA,OAAO;IAAEV,KAAF;IAASO;EAAT,CAAP;AACH,CAjSM;;GAAMR,c"},"metadata":{},"sourceType":"module"}