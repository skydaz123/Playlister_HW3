{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport MoveSong_Transaction from \"../transactions/MoveSong_transaction\";\nimport AddSong_Transaction from \"../transactions/AddSong_Transaction\";\nimport EditSong_Transaction from \"../transactions/EditSong_Transaction\";\nimport DeleteSong_Transaction from \"../transactions/DeleteSong_Transaction\";\nimport { createContext, useState } from \"react\";\nimport jsTPS from \"../common/jsTPS\";\nimport api from \"../api\";\nexport const GlobalStoreContext = /*#__PURE__*/createContext({});\n/*\r\n    This is our global data store. Note that it uses the Flux design pattern,\r\n    which makes use of things like actions and reducers. \r\n    \r\n    @author McKilla Gorilla\r\n*/\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\n\nexport const GlobalStoreActionType = {\n  MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\",\n  MARK_SONG_FOR_DELETION: \"MARK_SONG_FOR_DELETION\",\n  MARK_SONG_FOR_EDITING: \"MARK_SONG_FOR_EDITING\",\n  CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n  CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n  CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n  LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n  SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n  DELETE_LIST: \"DELETE_LIST\",\n  SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n  SHOW_DELETE_LIST_MODAL: \"SHOW_DELETE_LIST_MODAL\",\n  HIDE_DELETE_LIST_MODAL: \"HIDE_DELETE_LIST_MODAL\",\n  HIDE_DELETE_SONG_MODAL: \"HIDE_DELETE_SONG_MODAL\",\n  HIDE_EDIT_SONG_MODAL: \"HIDE_EDIT_SONG_MODAL\",\n  SET_LIST_ACTTIVE: \"SET_LIST_ACTTIVE\"\n}; // WE'LL NEED THIS TO PROCESS TRANSACTIONS\n\nconst tps = new jsTPS(); // WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\n\nexport const useGlobalStore = () => {\n  _s();\n\n  // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n  const [store, setStore] = useState({\n    idNamePairs: [],\n    currentList: null,\n    newListCounter: 0,\n    listNameActive: false,\n    deleteListId: null,\n    deleteSongIndex: null,\n    editSongIndex: null\n  }); // HERE'S THE DATA STORE'S REDUCER, IT MUST\n  // HANDLE EVERY TYPE OF STATE CHANGE\n\n  const storeReducer = action => {\n    const {\n      type,\n      payload\n    } = action;\n\n    switch (type) {\n      // LIST UPDATE OF ITS NAME\n      case GlobalStoreActionType.CHANGE_LIST_NAME:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: payload.playlist,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            deleteListId: null,\n            deleteSongIndex: null,\n            editSongIndex: null\n          });\n        }\n      // STOP EDITING THE CURRENT LIST\n\n      case GlobalStoreActionType.CLOSE_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            deleteListId: null,\n            deleteSongIndex: null,\n            editSongIndex: null\n          });\n        }\n      // CREATE A NEW LIST\n\n      case GlobalStoreActionType.CREATE_NEW_LIST:\n        {\n          console.log(\"CREATING NEW LIST\");\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter + 1,\n            listNameActive: false,\n            deleteListId: null,\n            deleteSongIndex: null,\n            editSongIndex: null\n          });\n        }\n\n      case GlobalStoreActionType.SET_LIST_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            listNameActive: payload,\n            deleteListId: store.deleteListId,\n            deleteSongIndex: null,\n            editSongIndex: null\n          });\n        }\n      // GET ALL THE LISTS SO WE CAN PRESENT THEM\n\n      case GlobalStoreActionType.LOAD_ID_NAME_PAIRS:\n        {\n          return setStore({\n            idNamePairs: payload,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            deleteListId: null,\n            deleteSongIndex: null,\n            editSongIndex: null\n          });\n        }\n      // PREPARE TO DELETE A LIST\n\n      case GlobalStoreActionType.MARK_LIST_FOR_DELETION:\n        {\n          console.log(\"payload is:\" + payload);\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload.playlist,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            deleteListId: payload.id,\n            deleteSongIndex: null,\n            editSongIndex: null\n          });\n        }\n\n      case GlobalStoreActionType.MARK_SONG_FOR_DELETION:\n        {\n          console.log(\"index to delete song is: \" + payload);\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            deleteListId: store.deleteListId,\n            deleteSongIndex: payload,\n            editSongIndex: null\n          });\n        }\n\n      case GlobalStoreActionType.MARK_SONG_FOR_EDITING:\n        {\n          console.log(\"index to edit song is: \" + payload);\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            deleteListId: store.deleteListId,\n            deleteSongIndex: null,\n            editSongIndex: payload\n          });\n        }\n      // UPDATE A LIST\n\n      case GlobalStoreActionType.SET_CURRENT_LIST:\n        {\n          console.log(\"SETTING CURRENT LIST\");\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            deleteListId: null,\n            deleteSongIndex: null,\n            editSongIndex: null\n          });\n        }\n\n      case GlobalStoreActionType.DELETE_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter - 1,\n            listNameActive: false,\n            deleteListId: null,\n            deleteSongIndex: null,\n            editSongIndex: null\n          });\n        }\n      // START EDITING A LIST NAME\n\n      case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: true,\n            deleteListId: null,\n            deleteSongIndex: null,\n            editSongIndex: null\n          });\n        }\n\n      case GlobalStoreActionType.SHOW_DELETE_LIST_MODAL:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            listNameActive: store.currentList,\n            deleteListId: store.deleteListId,\n            deleteSongIndex: null,\n            editSongIndex: null\n          });\n        }\n\n      case GlobalStoreActionType.HIDE_DELETE_LIST_MODAL:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: store.currentList,\n            deleteListId: null,\n            deleteSongIndex: null,\n            editSongIndex: null\n          });\n        }\n\n      case GlobalStoreActionType.HIDE_DELETE_SONG_MODAL:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            listNameActive: store.currentList,\n            deleteListId: null,\n            deleteSongIndex: null,\n            editSongIndex: null\n          });\n        }\n\n      case GlobalStoreActionType.HIDE_EDIT_SONG_MODAL:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            listNameActive: store.currentList,\n            deleteListId: null,\n            deleteSongIndex: null,\n            editSongIndex: null\n          });\n        }\n\n      default:\n        return store;\n    }\n  }; // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n  // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN\n  // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n\n  store.setIsListNameEditActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_LIST_ACTTIVE,\n      payload: true\n    });\n  }; // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n\n\n  store.changeListName = function (id, newName) {\n    // GET THE LIST\n    async function asyncChangeListName(id) {\n      let response = await api.getPlaylistById(id);\n\n      if (response.data.success) {\n        let playlist = response.data.playist;\n        playlist.name = newName;\n\n        async function updateList(playlist) {\n          // IMPLEMENT THIS\n          response = await api.updatePlaylistById(playlist._id, playlist);\n\n          if (response.data.success) {\n            async function getListPairs(playlist) {\n              response = await api.getPlaylistPairs();\n\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                  payload: {\n                    idNamePairs: pairsArray,\n                    playlist: playlist\n                  }\n                });\n              }\n            }\n\n            getListPairs(playlist);\n          }\n        }\n\n        updateList(playlist);\n      }\n    }\n\n    asyncChangeListName(id);\n  }; // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n\n\n  store.closeCurrentList = function () {\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n      payload: {}\n    });\n  };\n\n  store.createNewList = function () {\n    async function asyncCreatePlayList() {\n      const body = {\n        name: \"Untitled\"\n      };\n      const response = await api.createPlaylist(body);\n\n      if (response.data.success) {\n        let result = await api.getPlaylistPairs();\n        let pairsArray = result.data.idNamePairs;\n        storeReducer({\n          type: GlobalStoreActionType.CREATE_NEW_LIST,\n          payload: pairsArray\n        });\n        store.setCurrentList(pairsArray[pairsArray.length - 1]._id);\n      } else {\n        console.log(\"API FAILED TO GET THE LIST PAIRS\");\n      }\n    }\n\n    asyncCreatePlayList();\n  };\n\n  store.deleteList = function (id) {\n    console.log(\"delete id is : \" + id);\n\n    async function asyncDeleteList(test_id) {\n      const response = await api.deletePlaylist(test_id);\n\n      if (response.data.success) {\n        storeReducer({\n          type: GlobalStoreActionType.DELETE_LIST,\n          payload: null\n        });\n\n        if (store.newListCounter === 0) {\n          storeReducer({\n            type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n            payload: []\n          });\n        }\n\n        store.loadIdNamePairs();\n      } else {\n        console.log(\"API FAILED TO GET THE LIST PAIRS\");\n      }\n    }\n\n    store.hideDeleteListModal();\n    asyncDeleteList(id);\n  };\n\n  store.addAddSongTransaction = function () {\n    let transaction = new AddSong_Transaction(store);\n    tps.addTransaction(transaction);\n  };\n\n  store.addMoveSongTransaction = function (start, end) {\n    let transaction = new MoveSong_Transaction(store, start, end);\n    tps.addTransaction(transaction);\n  };\n\n  store.addDeleteSongTransaction = function (index, originalSong) {\n    let transaction = new DeleteSong_Transaction(store, index, originalSong);\n    tps.addTransaction(transaction);\n  };\n\n  store.addEditSongTransaction = function (index, title, artist, youTubeId, originalSong) {\n    let transaction = new EditSong_Transaction(store, index, originalSong, title, artist, youTubeId);\n    tps.addTransaction(transaction);\n  };\n\n  store.addSong = function () {\n    async function asyncAddSong() {\n      let list = store.currentList;\n      let song = {\n        title: \"Untitled\",\n        artist: \"Unknown\",\n        youTubeId: \"dQw4w9WgXcQ\"\n      };\n      list.songs.push(song);\n      await api.putPlaylist(list._id, list);\n      store.setCurrentList(list._id);\n    }\n\n    asyncAddSong();\n  };\n\n  store.popSong = function () {\n    async function asyncPopSong() {\n      let list = store.currentList;\n      list.songs.pop();\n      let response = await api.putPlaylist(list._id, list);\n\n      if (response.data.success) {\n        store.setCurrentList(list._id);\n      } else {\n        console.log(\"API FAILED TO GET THE LIST PAIRS\");\n      }\n    }\n\n    asyncPopSong();\n  };\n\n  store.deleteSong = function (index) {\n    async function asyncDeleteSong(test_index) {\n      let list = store.currentList;\n      list.songs.splice(test_index, 1);\n      await api.putPlaylist(list._id, list);\n      store.setCurrentList(list._id);\n    }\n\n    asyncDeleteSong(index);\n    store.hideDeleteSongModal();\n  };\n\n  store.insertSong = function (index, song) {\n    async function asyncInsertSong(test_index, test_song) {\n      let list = store.currentList;\n      list.songs.splice(test_index, 0, test_song);\n      let response = await api.putPlaylist(list._id, list);\n\n      if (response.data.success) {\n        store.setCurrentList(list._id);\n      } else {\n        console.log(\"API FAILED TO GET THE LIST PAIRS\");\n      }\n    }\n\n    asyncInsertSong(index, song);\n  };\n\n  store.editSong = async function (index, title, artist, youTubeId) {\n    async function asyncEditSong(test_index, initTitle, initArtist, initYouTubeId) {\n      let list = store.currentList;\n      let newSong = {\n        title: initTitle,\n        artist: initArtist,\n        youTubeId: initYouTubeId\n      };\n      list.songs[test_index] = newSong;\n      await api.putPlaylist(list._id, list);\n      store.setCurrentList(list._id);\n    }\n\n    asyncEditSong(index, title, artist, youTubeId);\n    store.hideEditSongModal();\n  };\n  /*store.moveSong(start, end) {\r\n            let list = store.currentList;\r\n            start -= 1;\r\n            end -= 1;\r\n            if (start < end) {\r\n                let temp = list.songs[start];\r\n                for (let i = start; i < end; i++) {\r\n                    list.songs[i] = list.songs[i + 1];\r\n                }\r\n                list.songs[end] = temp;\r\n            }\r\n            else if (start > end) {\r\n                let temp = list.songs[start];\r\n                for (let i = start; i > end; i--) {\r\n                    list.songs[i] = list.songs[i - 1];\r\n                }\r\n                list.songs[end] = temp;\r\n            }\r\n            store.setCurrentList(list.id, list.songs);\r\n    }*/\n  // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n\n\n  store.loadIdNamePairs = function () {\n    async function asyncLoadIdNamePairs() {\n      const response = await api.getPlaylistPairs();\n\n      if (response.data.success) {\n        let pairsArray = response.data.idNamePairs;\n        storeReducer({\n          type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n          payload: pairsArray\n        });\n      } else {\n        console.log(\"API FAILED TO GET THE LIST PAIRS\");\n      }\n    }\n\n    asyncLoadIdNamePairs();\n  };\n\n  store.setCurrentList = function (id) {\n    async function asyncSetCurrentList(id) {\n      let response = await api.getPlaylistById(id);\n\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.SET_CURRENT_LIST,\n            payload: playlist\n          });\n          store.history.push(\"/playlist/\" + playlist._id);\n        }\n      }\n    }\n\n    asyncSetCurrentList(id);\n  };\n\n  store.getPlaylistSize = function () {\n    return store.currentList.songs.length;\n  };\n\n  store.undo = function () {\n    tps.undoTransaction();\n  };\n\n  store.redo = function () {\n    tps.doTransaction();\n  }; // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n\n\n  store.setlistNameActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n      payload: null\n    });\n  };\n\n  store.showDeleteListModal = function (id) {\n    async function asyncShowDeleteListModal(test_id) {\n      let modal = document.getElementById(\"delete-list-modal\");\n      modal.classList.add(\"is-visible\");\n      let response = await api.getPlaylistById(test_id);\n      storeReducer({\n        type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n        payload: {\n          id: test_id,\n          playlist: response.data.playlist\n        }\n      });\n    }\n\n    asyncShowDeleteListModal(id);\n  };\n\n  store.showDeleteSongModal = function (index) {\n    let modal = document.getElementById(\"delete-song-modal\");\n    modal.classList.add(\"is-visible\");\n    storeReducer({\n      type: GlobalStoreActionType.MARK_SONG_FOR_DELETION,\n      payload: index\n    });\n  };\n\n  store.showEditSongModal = function (index) {\n    let modal = document.getElementById(\"edit-song-modal\");\n    modal.classList.add(\"is-visible\");\n    storeReducer({\n      type: GlobalStoreActionType.MARK_SONG_FOR_EDITING,\n      payload: index\n    });\n  };\n\n  store.hideEditSongModal = function () {\n    let modal = document.getElementById(\"edit-song-modal\");\n\n    if (modal !== null) {\n      modal.classList.remove(\"is-visible\");\n      storeReducer({\n        type: GlobalStoreActionType.HIDE_EDIT_SONG_MODAL,\n        payload: null\n      });\n    }\n  };\n\n  store.hideDeleteListModal = function () {\n    let modal = document.getElementById(\"delete-list-modal\");\n\n    if (modal !== null) {\n      modal.classList.remove(\"is-visible\");\n      storeReducer({\n        type: GlobalStoreActionType.HIDE_DELETE_LIST_MODAL,\n        payload: null\n      });\n    }\n  };\n\n  store.hideDeleteSongModal = function () {\n    let modal = document.getElementById(\"delete-song-modal\");\n\n    if (modal !== null) {\n      modal.classList.remove(\"is-visible\");\n      storeReducer({\n        type: GlobalStoreActionType.HIDE_DELETE_SONG_MODAL,\n        payload: null\n      });\n    }\n  }; // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n\n\n  return {\n    store,\n    storeReducer\n  };\n};\n\n_s(useGlobalStore, \"3gf67cajOdlaSPnt4lWvRg+71Fo=\");","map":{"version":3,"names":["MoveSong_Transaction","AddSong_Transaction","EditSong_Transaction","DeleteSong_Transaction","createContext","useState","jsTPS","api","GlobalStoreContext","GlobalStoreActionType","MARK_LIST_FOR_DELETION","MARK_SONG_FOR_DELETION","MARK_SONG_FOR_EDITING","CHANGE_LIST_NAME","CLOSE_CURRENT_LIST","CREATE_NEW_LIST","LOAD_ID_NAME_PAIRS","SET_CURRENT_LIST","DELETE_LIST","SET_LIST_NAME_EDIT_ACTIVE","SHOW_DELETE_LIST_MODAL","HIDE_DELETE_LIST_MODAL","HIDE_DELETE_SONG_MODAL","HIDE_EDIT_SONG_MODAL","SET_LIST_ACTTIVE","tps","useGlobalStore","store","setStore","idNamePairs","currentList","newListCounter","listNameActive","deleteListId","deleteSongIndex","editSongIndex","storeReducer","action","type","payload","playlist","console","log","SET_LIST_ACTIVE","id","setIsListNameEditActive","changeListName","newName","asyncChangeListName","response","getPlaylistById","data","success","playist","name","updateList","updatePlaylistById","_id","getListPairs","getPlaylistPairs","pairsArray","closeCurrentList","createNewList","asyncCreatePlayList","body","createPlaylist","result","setCurrentList","length","deleteList","asyncDeleteList","test_id","deletePlaylist","loadIdNamePairs","hideDeleteListModal","addAddSongTransaction","transaction","addTransaction","addMoveSongTransaction","start","end","addDeleteSongTransaction","index","originalSong","addEditSongTransaction","title","artist","youTubeId","addSong","asyncAddSong","list","song","songs","push","putPlaylist","popSong","asyncPopSong","pop","deleteSong","asyncDeleteSong","test_index","splice","hideDeleteSongModal","insertSong","asyncInsertSong","test_song","editSong","asyncEditSong","initTitle","initArtist","initYouTubeId","newSong","hideEditSongModal","asyncLoadIdNamePairs","asyncSetCurrentList","history","getPlaylistSize","undo","undoTransaction","redo","doTransaction","setlistNameActive","showDeleteListModal","asyncShowDeleteListModal","modal","document","getElementById","classList","add","showDeleteSongModal","showEditSongModal","remove"],"sources":["C:/Users/haodu/OneDrive/Desktop/hw3/d/client/src/store/index.js"],"sourcesContent":["import MoveSong_Transaction from \"../transactions/MoveSong_transaction\";\r\nimport AddSong_Transaction from \"../transactions/AddSong_Transaction\";\r\nimport EditSong_Transaction from \"../transactions/EditSong_Transaction\";\r\nimport DeleteSong_Transaction from \"../transactions/DeleteSong_Transaction\";\r\n\r\nimport { createContext, useState } from \"react\";\r\nimport jsTPS from \"../common/jsTPS\";\r\nimport api from \"../api\";\r\nexport const GlobalStoreContext = createContext({});\r\n\r\n/*\r\n    This is our global data store. Note that it uses the Flux design pattern,\r\n    which makes use of things like actions and reducers. \r\n    \r\n    @author McKilla Gorilla\r\n*/\r\n\r\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\r\n// DATA STORE STATE THAT CAN BE PROCESSED\r\nexport const GlobalStoreActionType = {\r\n  MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\",\r\n  MARK_SONG_FOR_DELETION: \"MARK_SONG_FOR_DELETION\",\r\n  MARK_SONG_FOR_EDITING: \"MARK_SONG_FOR_EDITING\",\r\n  CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\r\n  CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\r\n  CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\r\n  LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\r\n  SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\r\n  DELETE_LIST: \"DELETE_LIST\",\r\n  SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\r\n  SHOW_DELETE_LIST_MODAL: \"SHOW_DELETE_LIST_MODAL\",\r\n  HIDE_DELETE_LIST_MODAL: \"HIDE_DELETE_LIST_MODAL\",\r\n  HIDE_DELETE_SONG_MODAL: \"HIDE_DELETE_SONG_MODAL\",\r\n  HIDE_EDIT_SONG_MODAL: \"HIDE_EDIT_SONG_MODAL\",\r\n  SET_LIST_ACTTIVE: \"SET_LIST_ACTTIVE\",\r\n};\r\n\r\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\r\nconst tps = new jsTPS();\r\n\r\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\r\n// AVAILABLE TO THE REST OF THE APPLICATION\r\nexport const useGlobalStore = () => {\r\n  // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\r\n  const [store, setStore] = useState({\r\n    idNamePairs: [],\r\n    currentList: null,\r\n    newListCounter: 0,\r\n    listNameActive: false,\r\n    deleteListId: null,\r\n    deleteSongIndex: null,\r\n    editSongIndex: null,\r\n  });\r\n\r\n  // HERE'S THE DATA STORE'S REDUCER, IT MUST\r\n  // HANDLE EVERY TYPE OF STATE CHANGE\r\n  const storeReducer = (action) => {\r\n    const { type, payload } = action;\r\n    switch (type) {\r\n      // LIST UPDATE OF ITS NAME\r\n      case GlobalStoreActionType.CHANGE_LIST_NAME: {\r\n        return setStore({\r\n          idNamePairs: payload.idNamePairs,\r\n          currentList: payload.playlist,\r\n          newListCounter: store.newListCounter,\r\n          listNameActive: false,\r\n          deleteListId: null,\r\n          deleteSongIndex: null,\r\n          editSongIndex: null,\r\n        });\r\n      }\r\n      // STOP EDITING THE CURRENT LIST\r\n      case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\r\n        return setStore({\r\n          idNamePairs: store.idNamePairs,\r\n          currentList: null,\r\n          newListCounter: store.newListCounter,\r\n          listNameActive: false,\r\n          deleteListId: null,\r\n          deleteSongIndex: null,\r\n          editSongIndex: null,\r\n        });\r\n      }\r\n      // CREATE A NEW LIST\r\n      case GlobalStoreActionType.CREATE_NEW_LIST: {\r\n        console.log(\"CREATING NEW LIST\");\r\n        return setStore({\r\n          idNamePairs: store.idNamePairs,\r\n          currentList: payload,\r\n          newListCounter: store.newListCounter + 1,\r\n          listNameActive: false,\r\n          deleteListId: null,\r\n          deleteSongIndex: null,\r\n          editSongIndex: null,\r\n        });\r\n      }\r\n\r\n      case GlobalStoreActionType.SET_LIST_ACTIVE: {\r\n        return setStore({\r\n          idNamePairs: store.idNamePairs,\r\n          currentList: store.currentList,\r\n          newListCounter: store.newListCounter,\r\n          listNameActive: payload,\r\n          deleteListId: store.deleteListId,\r\n          deleteSongIndex: null,\r\n          editSongIndex: null,\r\n        });\r\n      }\r\n      // GET ALL THE LISTS SO WE CAN PRESENT THEM\r\n      case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\r\n        return setStore({\r\n          idNamePairs: payload,\r\n          currentList: null,\r\n          newListCounter: store.newListCounter,\r\n          listNameActive: false,\r\n          deleteListId: null,\r\n          deleteSongIndex: null,\r\n          editSongIndex: null,\r\n        });\r\n      }\r\n      // PREPARE TO DELETE A LIST\r\n      case GlobalStoreActionType.MARK_LIST_FOR_DELETION: {\r\n        console.log(\"payload is:\" + payload);\r\n        return setStore({\r\n          idNamePairs: store.idNamePairs,\r\n          currentList: payload.playlist,\r\n          newListCounter: store.newListCounter,\r\n          listNameActive: false,\r\n          deleteListId: payload.id,\r\n          deleteSongIndex: null,\r\n          editSongIndex: null,\r\n        });\r\n      }\r\n\r\n      case GlobalStoreActionType.MARK_SONG_FOR_DELETION: {\r\n        console.log(\"index to delete song is: \" + payload);\r\n        return setStore({\r\n          idNamePairs: store.idNamePairs,\r\n          currentList: store.currentList,\r\n          newListCounter: store.newListCounter,\r\n          listNameActive: false,\r\n          deleteListId: store.deleteListId,\r\n          deleteSongIndex: payload,\r\n          editSongIndex: null,\r\n        });\r\n      }\r\n\r\n      case GlobalStoreActionType.MARK_SONG_FOR_EDITING: {\r\n        console.log(\"index to edit song is: \" + payload);\r\n        return setStore({\r\n          idNamePairs: store.idNamePairs,\r\n          currentList: store.currentList,\r\n          newListCounter: store.newListCounter,\r\n          listNameActive: false,\r\n          deleteListId: store.deleteListId,\r\n          deleteSongIndex: null,\r\n          editSongIndex: payload,\r\n        });\r\n      }\r\n\r\n      // UPDATE A LIST\r\n      case GlobalStoreActionType.SET_CURRENT_LIST: {\r\n        console.log(\"SETTING CURRENT LIST\");\r\n        return setStore({\r\n          idNamePairs: store.idNamePairs,\r\n          currentList: payload,\r\n          newListCounter: store.newListCounter,\r\n          listNameActive: false,\r\n          deleteListId: null,\r\n          deleteSongIndex: null,\r\n          editSongIndex: null,\r\n        });\r\n      }\r\n      case GlobalStoreActionType.DELETE_LIST: {\r\n        return setStore({\r\n          idNamePairs: store.idNamePairs,\r\n          currentList: payload,\r\n          newListCounter: store.newListCounter - 1,\r\n          listNameActive: false,\r\n          deleteListId: null,\r\n          deleteSongIndex: null,\r\n          editSongIndex: null,\r\n        });\r\n      }\r\n      // START EDITING A LIST NAME\r\n      case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE: {\r\n        return setStore({\r\n          idNamePairs: store.idNamePairs,\r\n          currentList: payload,\r\n          newListCounter: store.newListCounter,\r\n          listNameActive: true,\r\n          deleteListId: null,\r\n          deleteSongIndex: null,\r\n          editSongIndex: null,\r\n        });\r\n      }\r\n\r\n      case GlobalStoreActionType.SHOW_DELETE_LIST_MODAL: {\r\n        return setStore({\r\n          idNamePairs: store.idNamePairs,\r\n          currentList: store.currentList,\r\n          newListCounter: store.newListCounter,\r\n          listNameActive: store.currentList,\r\n          deleteListId: store.deleteListId,\r\n          deleteSongIndex: null,\r\n          editSongIndex: null,\r\n        });\r\n      }\r\n\r\n      case GlobalStoreActionType.HIDE_DELETE_LIST_MODAL: {\r\n        return setStore({\r\n          idNamePairs: store.idNamePairs,\r\n          currentList: null,\r\n          newListCounter: store.newListCounter,\r\n          listNameActive: store.currentList,\r\n          deleteListId: null,\r\n          deleteSongIndex: null,\r\n          editSongIndex: null,\r\n        });\r\n      }\r\n\r\n      case GlobalStoreActionType.HIDE_DELETE_SONG_MODAL: {\r\n        return setStore({\r\n          idNamePairs: store.idNamePairs,\r\n          currentList: store.currentList,\r\n          newListCounter: store.newListCounter,\r\n          listNameActive: store.currentList,\r\n          deleteListId: null,\r\n          deleteSongIndex: null,\r\n          editSongIndex: null,\r\n        });\r\n      }\r\n\r\n      case GlobalStoreActionType.HIDE_EDIT_SONG_MODAL: {\r\n        return setStore({\r\n          idNamePairs: store.idNamePairs,\r\n          currentList: store.currentList,\r\n          newListCounter: store.newListCounter,\r\n          listNameActive: store.currentList,\r\n          deleteListId: null,\r\n          deleteSongIndex: null,\r\n          editSongIndex: null,\r\n        });\r\n      }\r\n      default:\r\n        return store;\r\n    }\r\n  };\r\n  // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\r\n  // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN\r\n  // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\r\n\r\n  store.setIsListNameEditActive = function () {\r\n    storeReducer({\r\n      type: GlobalStoreActionType.SET_LIST_ACTTIVE,\r\n      payload: true,\r\n    });\r\n  };\r\n  // THIS FUNCTION PROCESSES CHANGING A LIST NAME\r\n  store.changeListName = function (id, newName) {\r\n    // GET THE LIST\r\n    async function asyncChangeListName(id) {\r\n      let response = await api.getPlaylistById(id);\r\n      if (response.data.success) {\r\n        let playlist = response.data.playist;\r\n        playlist.name = newName;\r\n        async function updateList(playlist) {\r\n          // IMPLEMENT THIS\r\n          response = await api.updatePlaylistById(playlist._id, playlist);\r\n          if (response.data.success) {\r\n            async function getListPairs(playlist) {\r\n              response = await api.getPlaylistPairs();\r\n              if (response.data.success) {\r\n                let pairsArray = response.data.idNamePairs;\r\n                storeReducer({\r\n                  type: GlobalStoreActionType.CHANGE_LIST_NAME,\r\n                  payload: {\r\n                    idNamePairs: pairsArray,\r\n                    playlist: playlist,\r\n                  },\r\n                });\r\n              }\r\n            }\r\n            getListPairs(playlist);\r\n          }\r\n        }\r\n        updateList(playlist);\r\n      }\r\n    }\r\n    asyncChangeListName(id);\r\n  };\r\n\r\n  // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\r\n  store.closeCurrentList = function () {\r\n    storeReducer({\r\n      type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\r\n      payload: {},\r\n    });\r\n  };\r\n\r\n  store.createNewList = function () {\r\n    async function asyncCreatePlayList() {\r\n      const body = { name: \"Untitled\" };\r\n      const response = await api.createPlaylist(body);\r\n      if (response.data.success) {\r\n        let result = await api.getPlaylistPairs();\r\n        let pairsArray = result.data.idNamePairs;\r\n        storeReducer({\r\n          type: GlobalStoreActionType.CREATE_NEW_LIST,\r\n          payload: pairsArray,\r\n        });\r\n        store.setCurrentList(pairsArray[pairsArray.length - 1]._id);\r\n      } else {\r\n        console.log(\"API FAILED TO GET THE LIST PAIRS\");\r\n      }\r\n    }\r\n    asyncCreatePlayList();\r\n  };\r\n\r\n  store.deleteList = function (id) {\r\n    console.log(\"delete id is : \" + id);\r\n    async function asyncDeleteList(test_id) {\r\n      const response = await api.deletePlaylist(test_id);\r\n      if (response.data.success) {\r\n        storeReducer({\r\n          type: GlobalStoreActionType.DELETE_LIST,\r\n          payload: null,\r\n        });\r\n        if (store.newListCounter === 0) {\r\n          storeReducer({\r\n            type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\r\n            payload: [],\r\n          });\r\n        }\r\n        store.loadIdNamePairs();\r\n      } else {\r\n        console.log(\"API FAILED TO GET THE LIST PAIRS\");\r\n      }\r\n    }\r\n    store.hideDeleteListModal();\r\n    asyncDeleteList(id);\r\n  };\r\n\r\n  store.addAddSongTransaction = function () {\r\n    let transaction = new AddSong_Transaction(store);\r\n    tps.addTransaction(transaction);\r\n  };\r\n\r\n  store.addMoveSongTransaction = function (start, end) {\r\n    let transaction = new MoveSong_Transaction(store, start, end);\r\n    tps.addTransaction(transaction);\r\n  };\r\n\r\n  store.addDeleteSongTransaction = function (index, originalSong) {\r\n    let transaction = new DeleteSong_Transaction(store, index, originalSong);\r\n    tps.addTransaction(transaction);\r\n  };\r\n\r\n  store.addEditSongTransaction = function (index, title, artist, youTubeId, originalSong) {\r\n    let transaction = new EditSong_Transaction(store, index, originalSong, title, artist, youTubeId);\r\n    tps.addTransaction(transaction);\r\n  };\r\n\r\n  store.addSong = function () {\r\n    async function asyncAddSong() {\r\n      let list = store.currentList;\r\n      let song = {\r\n        title: \"Untitled\",\r\n        artist: \"Unknown\",\r\n        youTubeId: \"dQw4w9WgXcQ\",\r\n      };\r\n      list.songs.push(song);\r\n      await api.putPlaylist(list._id, list);\r\n      store.setCurrentList(list._id);\r\n    }\r\n    asyncAddSong();\r\n  };\r\n\r\n  store.popSong = function () {\r\n    async function asyncPopSong() {\r\n      let list = store.currentList;\r\n      list.songs.pop();\r\n      let response = await api.putPlaylist(list._id, list);\r\n      if (response.data.success) {\r\n        store.setCurrentList(list._id);\r\n      } else {\r\n        console.log(\"API FAILED TO GET THE LIST PAIRS\");\r\n      }\r\n    }\r\n    asyncPopSong();\r\n  };\r\n\r\n  store.deleteSong = function (index) {\r\n    async function asyncDeleteSong(test_index) {\r\n      let list = store.currentList;\r\n      list.songs.splice(test_index, 1);\r\n      await api.putPlaylist(list._id, list);\r\n      store.setCurrentList(list._id);\r\n    }\r\n    asyncDeleteSong(index);\r\n    store.hideDeleteSongModal();\r\n  };\r\n\r\n  store.insertSong = function (index, song) {\r\n    async function asyncInsertSong(test_index, test_song) {\r\n      let list = store.currentList;\r\n      list.songs.splice(test_index, 0, test_song);\r\n      let response = await api.putPlaylist(list._id, list);\r\n      if (response.data.success) {\r\n        store.setCurrentList(list._id);\r\n      } else {\r\n        console.log(\"API FAILED TO GET THE LIST PAIRS\");\r\n      }\r\n    }\r\n    asyncInsertSong(index, song);\r\n  };\r\n\r\n  store.editSong = async function(index, title, artist, youTubeId) {\r\n    async function asyncEditSong(\r\n      test_index,\r\n      initTitle,\r\n      initArtist,\r\n      initYouTubeId\r\n    ) {\r\n      let list = store.currentList;\r\n      let newSong = {\r\n        title: initTitle,\r\n        artist: initArtist,\r\n        youTubeId: initYouTubeId,\r\n      };\r\n      list.songs[test_index] = newSong;\r\n      await api.putPlaylist(list._id, list);\r\n      store.setCurrentList(list._id);\r\n    }\r\n    asyncEditSong(index, title, artist, youTubeId);\r\n    store.hideEditSongModal();\r\n  };\r\n\r\n  /*store.moveSong(start, end) {\r\n            let list = store.currentList;\r\n            start -= 1;\r\n            end -= 1;\r\n            if (start < end) {\r\n                let temp = list.songs[start];\r\n                for (let i = start; i < end; i++) {\r\n                    list.songs[i] = list.songs[i + 1];\r\n                }\r\n                list.songs[end] = temp;\r\n            }\r\n            else if (start > end) {\r\n                let temp = list.songs[start];\r\n                for (let i = start; i > end; i--) {\r\n                    list.songs[i] = list.songs[i - 1];\r\n                }\r\n                list.songs[end] = temp;\r\n            }\r\n            store.setCurrentList(list.id, list.songs);\r\n    }*/\r\n\r\n  // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\r\n  store.loadIdNamePairs = function () {\r\n    async function asyncLoadIdNamePairs() {\r\n      const response = await api.getPlaylistPairs();\r\n      if (response.data.success) {\r\n        let pairsArray = response.data.idNamePairs;\r\n        storeReducer({\r\n          type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\r\n          payload: pairsArray,\r\n        });\r\n      } else {\r\n        console.log(\"API FAILED TO GET THE LIST PAIRS\");\r\n      }\r\n    }\r\n    asyncLoadIdNamePairs();\r\n  };\r\n\r\n  store.setCurrentList = function (id) {\r\n    async function asyncSetCurrentList(id) {\r\n      let response = await api.getPlaylistById(id);\r\n      if (response.data.success) {\r\n        let playlist = response.data.playlist;\r\n\r\n        if (response.data.success) {\r\n          storeReducer({\r\n            type: GlobalStoreActionType.SET_CURRENT_LIST,\r\n            payload: playlist,\r\n          });\r\n          store.history.push(\"/playlist/\" + playlist._id);\r\n        }\r\n      }\r\n    }\r\n    asyncSetCurrentList(id);\r\n  };\r\n  store.getPlaylistSize = function () {\r\n    return store.currentList.songs.length;\r\n  };\r\n  store.undo = function () {\r\n    tps.undoTransaction();\r\n  };\r\n  store.redo = function () {\r\n    tps.doTransaction();\r\n  };\r\n\r\n  // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\r\n  store.setlistNameActive = function () {\r\n    storeReducer({\r\n      type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\r\n      payload: null,\r\n    });\r\n  };\r\n\r\n  store.showDeleteListModal = function (id) {\r\n    async function asyncShowDeleteListModal(test_id) {\r\n      let modal = document.getElementById(\"delete-list-modal\");\r\n      modal.classList.add(\"is-visible\");\r\n      let response = await api.getPlaylistById(test_id);\r\n      storeReducer({\r\n        type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\r\n        payload: {\r\n          id: test_id,\r\n          playlist: response.data.playlist,\r\n        },\r\n      });\r\n    }\r\n    asyncShowDeleteListModal(id);\r\n  };\r\n\r\n  store.showDeleteSongModal = function (index) {\r\n    let modal = document.getElementById(\"delete-song-modal\");\r\n    modal.classList.add(\"is-visible\");\r\n    storeReducer({\r\n      type: GlobalStoreActionType.MARK_SONG_FOR_DELETION,\r\n      payload: index,\r\n    });\r\n  };\r\n\r\n  store.showEditSongModal = function (index) {\r\n    let modal = document.getElementById(\"edit-song-modal\");\r\n    modal.classList.add(\"is-visible\");\r\n    storeReducer({\r\n      type: GlobalStoreActionType.MARK_SONG_FOR_EDITING,\r\n      payload: index,\r\n    });\r\n  };\r\n\r\n  store.hideEditSongModal = function () {\r\n    let modal = document.getElementById(\"edit-song-modal\");\r\n    if (modal !== null) {\r\n      modal.classList.remove(\"is-visible\");\r\n      storeReducer({\r\n        type: GlobalStoreActionType.HIDE_EDIT_SONG_MODAL,\r\n        payload: null,\r\n      });\r\n    }\r\n  };\r\n  store.hideDeleteListModal = function () {\r\n    let modal = document.getElementById(\"delete-list-modal\");\r\n    if (modal !== null) {\r\n      modal.classList.remove(\"is-visible\");\r\n      storeReducer({\r\n        type: GlobalStoreActionType.HIDE_DELETE_LIST_MODAL,\r\n        payload: null,\r\n      });\r\n    }\r\n  };\r\n\r\n  store.hideDeleteSongModal = function () {\r\n    let modal = document.getElementById(\"delete-song-modal\");\r\n    if (modal !== null) {\r\n      modal.classList.remove(\"is-visible\");\r\n      storeReducer({\r\n        type: GlobalStoreActionType.HIDE_DELETE_SONG_MODAL,\r\n        payload: null,\r\n      });\r\n    }\r\n  };\r\n  // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\r\n  return { store, storeReducer };\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}